"""
All Sentry related functions should be put here
"""
import os
import re
import logging
import socket
from ipaddress import ip_address, ip_network

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

class LxkSentry:
    """
    Sentry related functions are in here.
    """

    def get_ip_address(self):
        """
        This gets ip address of the machine

        Args:
            None

        Return:
            IP Address (String)
        """
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        return s.getsockname()[0]

    def verify_qemu(self):
        """
        Inspect qemu details

        Args:
            None

        Return:
            Dictionary
                Key:'isQemu', True if running on qemu, False otherwise
                Key:'inSentryVLAN', True if running on sentry vlan, False otherwise
        """
        # I think this should be put in a config file
        sentry_vlan = [u'10.194.92.0/24', u'10.194.93.0/24', u'10.194.94.0/24', u'10.194.95.0/24']
        retval = {'isQemu':False, 'inSentryVLAN':False}
        if 'qemux86' in socket.gethostname():
            retval['isQemu'] = True
            LOGGER.info('isQemu: True')
        else:
            LOGGER.info('isQemu: False')

        qemu_ip = self.get_ip_address()
        if any(ip_address(qemu_ip) in ip_network(subnet) for subnet in sentry_vlan):
            retval['inSentryVLAN'] = True
            LOGGER.info('iSentryVLAN: True')
        else:
            LOGGER.info('iSentryVLAN: False')
        return retval

    def is_run_in_sentry(self):
        """
        Check if running on Sentry setup

        Args:
            None

        Return:
            True if on Sentry, otherwise, False
        """
        try:
            os.environ["SUITE"]
            LOGGER.info('Running in Sentry...')
            return True
        except KeyError:
            LOGGER.info('Not Running in Sentry...')
        return False

    def change_mount_path(self, oldfile):
        """
        When run in sentry changed /pfv/.firmwaretestcebu to /mnt/firmwaretestcebu

        Args:
            oldfile: old filename with fullpath

        Return:
            newfile: new filename with fullpath
        """

        newfile = oldfile
        if self.is_run_in_sentry():
            LOGGER.info("Changing mount from /pfv/ to /mnt/")
            if os.path.isdir('/mnt/firmwaretestcebu') and os.path.exists('/mnt/firmwaretestcebu'):
                newfile = oldfile.replace("/pfv/.", "/mnt/")
            else:
                LOGGER.info("Changing mount failed, '/mnt/firmwaretestcebu' not found!")
        return newfile

    def change_mount_external(self, oldfile):
        """
        When run in sentry changed features/tests/<testarea>/<testsuite> to features/tests/external

        Args:
            oldfile: old filename with fullpath

        Return:
            newfile: new filename with fullpath
        """
        externaldir = "features/tests/external"
        newfile = oldfile
        if self.is_run_in_sentry():
            LOGGER.info("Changing file path to 'external'")
            if os.path.isdir(externaldir) and os.path.exists(externaldir):
                filelist = re.split("/", oldfile, maxsplit=4)
                newfile = externaldir + "/" + filelist[4]
            else:
                LOGGER.info("Changing file path failed, '"+ externaldir +"' not found!")
        return newfile

    def change_flashfiles_dest_path(self, oldfile):
        """
        When run in sentry changed flashfiles placeholder to /mnt/flashfiles to avoid\
        filling up disk space on qemu-tester

        Args:
            oldfile: old destination file
        Return:
            newfile: once in sentry newfile changed to /mnt/flashfiles/<file>
        """

        newfile = oldfile
        if self.is_run_in_sentry():
            LOGGER.info("Changing flash file mount to '/mnt/flashfiles'")
            if os.path.isdir('/mnt/flashfiles') and os.path.exists('/mnt/flashfiles'):
                destdir = os.path.dirname(oldfile)
                newfile = oldfile.replace(destdir, "/mnt/flashfiles")
            else:
                LOGGER.info("Changing flash file mount failed, '/mnt/flashfiles' not found!")
        return newfile
