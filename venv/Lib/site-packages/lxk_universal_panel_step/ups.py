"""
Importing the top-level package will import UPS class in this module:
``from lxk_universal_panel_step import UPS``.

"""

import os
import platform
import requests
from .core import universal_panel_step

class UPS():
    """
    A new instance requires initialization. Run ``UPS.initialize()`` after
    instantiating.

    Attributes:

        1. **printer_ip**: IPv4 address of the targer printer; ``str``.
    """

    def __init__(self, printer_ip):
        self._core = None
        self._initialized = False
        self.printer_ip = printer_ip

    def __repr__(self):
        return "UPS <{ip}>".format(ip=self.printer_ip)

    @property
    def printer_ip(self):
        """ Printer IP address attached to UPS object.

        .. warning::

            Call ``initalize()`` when setting a new target printer.

        """
        return self._printer_ip

    @printer_ip.setter
    def printer_ip(self, value):
        self._initialized = False
        self._printer_ip = value

    def initialize(self):
        """
        Initialize and load the UPS core module into the object.

        1. Load the IP address.
        2. Set the system-platform (i.e. linux, windows).

        Returns:
            True if successful, otherwise an exception will be raised.

        """
        assert isinstance(self.printer_ip, str), "{ip} must be {type_}.".\
            format(ip=self.printer_ip, type_=str)
        if not self._initialized:
            self._core = universal_panel_step
            self._core.__dict__["DEVICE_INFO"] = None
            self._core.__dict__["IP_ADDRESS"] = self.printer_ip
            self._core.__dict__["OS"] = platform.system().lower()
            self._initialized = True
        return True

    def regex(self, step):
        """
        An entry point method to execute UPS; executes a step.

        Args:
            1. **step**: a ``str`` following UPS syntax and rules.

        Returns:
            True if successful, otherwise an exception will be raised.

        """
        assert isinstance(step, str), "{step} must be {type_}.".\
            format(step=step, type_=str)
        assert self._initialized, (
            "{self_} not initialized. ".format(self_=self),
            "Run UPS.initialize() method."
        )
        return self._core.execute_step_regex(step)

    def find_widget_and_do_action(self, \
                                  area_phrase, areanode_whereclause, \
                                  text_phrase, textnode_whereclause, \
                                  widget_phrase, widgetnode_whereclause, \
                                  action_phrase, action):
        """
        Another entry point method to execute UPS; this method is a function
        in ``lettuce-runner`` and is originally the main entry point to
        executing UPS.

        Args:

            1. **area_phrase**: ``str``.
            2. **areanode_whereclause**: ``str`` or ``None``.
            3. **text_phrase**: ``str``.
            4. **textnode_whereclause**: ``str`` or ``None``.
            5. **widget_phrase**: ``str``.
            6. **widgetnode_whereclause**: ``str`` or ``None``.
            7. **action_phrase**: ``str``.
            8. **action**: ``str`` *required*.

        Returns:
            True if successful, otherwise an exception will be raised.

        """
        assert self._initialized, (
            "{self_} not initialized. ".format(self_=self),
            "Run UPS.initialize() method."
        )
        return self._core.find_widget_and_do_action(area_phrase, areanode_whereclause, \
                                text_phrase, textnode_whereclause, \
                                widget_phrase, widgetnode_whereclause, \
                                action_phrase, action)
