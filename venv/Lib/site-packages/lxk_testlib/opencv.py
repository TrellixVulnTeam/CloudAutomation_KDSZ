"""
OpenCV Utility Functions
================

Functions used for image procesing.
This uses opencv-python package.

For full documentation, see:
https://github.com/skvark/opencv-python
"""
import os
import cv2
import logging

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def compare(img1_path, img2_path, min_similarity=100):
    """ Compare two images based on opencv image difference value
    :Parameters:
        1. img1_path      = path of the first image to compare
        2. img2_path      = path of the second image to compare
        3. min_similarity = percentage allowable image similiarity; optional;
                            defaults to 100% (100)
    :Returns: (boolean)
    """
    # Get decimal equivalent of minimum image similarity
    img_similarity_val = str(min_similarity)
    img_similarity_val = float(min_similarity) * 0.01

    LOGGER.debug(img1_path)
    LOGGER.debug(img2_path)
    LOGGER.debug(img_similarity_val)

    # Get actual image difference between two images
    image_1 = cv2.imread(img1_path, 0)
    image_2 = cv2.imread(img2_path, 0)
    img_diff = _get_image_difference(image_1, image_2)
    allowed_diff = 1 - img_similarity_val
    LOGGER.debug(allowed_diff)
    LOGGER.debug(img_diff)

    if img_diff == 0.0 or allowed_diff >= img_diff:
        return True
    return False

def convert(img_file, img_ext, save_path=None):
    """ Convert an image to desired format
    :Parameters:
        1. img_file  = filename of the image
        2. img_ext   = new format (.png, .jpeg, .jpg, .bmp, .dib, .jpe,
                      .jp2, .pbm, .pgm, .ppm, .sr, .ras, .tiff, .tif)
        3. save_path = path where to save the converted image; optional;
                       defaults to the same directory of the original image.
    Return: (boolean)
    """
    LOGGER.debug(img_file)
    LOGGER.debug(img_ext)
    img_type = ['png', 'jpeg', 'jpg', 'bmp', 'dib', 'jpe', 'jp2', 'pbm', 'pgm',
    'ppm', 'sr', 'ras', 'tiff', 'tif']
    if img_ext  in img_type:
        img_rgb = cv2.imread(img_file, 1)
        try:
            save_path = img_file if save_path is None else save_path
            img_path = save_path.replace(save_path.split('.')[1], img_ext)
            LOGGER.debug(img_path)
            cv2.imwrite(img_path, img_rgb)

            LOGGER.debug("OpenCV read and write success.")
            return True
        except Exception as e:
            LOGGER.debug(e)
            return False
    else:
        LOGGER.debug("Invalid extension. Please select from this list %s" % str(img_type))
        return False

def resize(img_file, width, height, save_path=None):
    """ Read given filename, resize it using given width & height, then write it again
    :Parameters:
        1. img_file  = filename of the original image
        2. width     = new width aspect
        3. height    = new height aspect
        4. save_path = path where to save the converted image; optional;
                       defaults to the same directory of the original image.
    :Returns: (boolean)
    """
    w = int(width)
    h = int(height)
    img_rgb = cv2.imread(img_file, 1)
    resized = cv2.resize(img_rgb, (w, h), 0, 0, 0, cv2.INTER_AREA)

    if w not in resized.shape and h not in resized.shape:
        LOGGER.debug("Incorrectly resized the imaged to {}x{} pixels.".format(width, height))
        return False

    img_path = img_file if save_path is None else save_path
    LOGGER.debug(img_path)
    if cv2.imwrite(img_path, resized) == False:
        LOGGER.debug("OpenCV write failed.")
        return False

    LOGGER.debug("OpenCV write success.")
    return True

def _get_image_difference(img1, img2):
    """ Calculates the difference between two images
    :Parameters:
        1. img1 = path of the first image
        2. img2 = path of the second image
    :Returns: (decimal)
    """
    first_image_hist = cv2.calcHist([img1], [0], None, [256], [0, 256])
    second_image_hist = cv2.calcHist([img2], [0], None, [256], [0, 256])

    img_hist_diff = cv2.compareHist(first_image_hist, second_image_hist, cv2.HISTCMP_BHATTACHARYYA)
    img_template_probability_match = cv2.matchTemplate(first_image_hist, second_image_hist, cv2.TM_CCOEFF_NORMED)[0][0]
    img_template_diff = 1 - img_template_probability_match

    # taking only 10% of histogram diff, since it's less accurate than template method
    # img_diff = (img_hist_diff / 10) + img_template_diff
    # return img_diff

    #Return full image difference for comparison
    return img_template_diff

if __name__ == '__main__':
    # create logger
    from lxk_testlib.utils import logger
    logger.create(
        name=__name__,
        filename="opencv.log",
        path=os.path.join(os.getcwd(), "logs")
    )

    image1 = 'C:\\Users\\mmontebon\\Downloads\\pacman2.jpg'
    image2 = 'C:\\Users\\mmontebon\\Downloads\\test_resized.jpg'

    # print(convert(image1, 'jpg', 'C:\\Users\\mmontebon\\Downloads\\test2.jpg'))

    # print(resize(image1, 100, 100, 'C:\\Users\\mmontebon\\Downloads\\test_resized.jpg'))

    print(compare(image1, imge2, 99))