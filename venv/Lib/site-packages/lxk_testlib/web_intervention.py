"""
Web IR Module
==========


"""

import logging

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def find_between(string, first, last):
    """ Extract the substring between the leftmost instances of first and last. The substring will not include first and last. For example, find_between('[hello][]', '[', ']') will return 'hello'
    Args:
        string - string from which the substring is to be taken
        first - character or string after which the substring is found
        last - character or string before which the substring is found
    Return:
        String between first and last
    """
    try:
        start = string.index(first) + len(first)
        end = string.index(last, start)
        return string[start:end]
    except ValueError: #either first or last could not be found
        return ""

def web_get_error_code_from_banner_message(web_banner_message):
    """ Get the error code in brackets in the banner message. This applies to the EWS banner message only

    Args:
        web_banner_message - banner message where to get the error code

    Return:
        Error code found in brackets; will return empty string if there are no brackets in the banner message
    """
    error_code = ""
    if web_banner_message:
        #web_banner_message[0]
        error_code = find_between(web_banner_message, "[", "]")

    return error_code

def web_check_list(val, _list):
    """ Check if the provided value is one of the list stored

    Args:
        val - value to check if it exists in _list
        _list - list where to check the value 

    Return:
        True if the provided value exists in _list; otherwise, False
    """
    success = False
    msg = "ErrMsg: The provided value was '{0}', but the list is {1}".format(val, _list)
    if not val:  #empty val string
        if not _list:  #empty
            success = True
            msg = "The list is blank"
    elif val in _list:
        success = True
        msg = "The provided value exists in the list"

    return (success, msg)

def web_get_report_data(title, report, web_report_data, web_report_searches):
    """ Get the data from the report and store into web_report_data. The variable web_report_searches will also be initialized for later use

    Args:
        title - The string under which the data would be saved. This would serve as the key for future reference
        report - The data to be saved
        web_report_data - The dict where to save the report
        web_report_searches - The dict to be initialize

    Return:
        True if successfully saved; False otherwise
    """
    success = False
    msg = "ErrMsg: Could not save report data under {}".format(title)

    if report is not None:
        success = True
        msg = "Saved report data under '{}'".format(title)
        report_data = report.split("\n")
        report_data = [x.strip(" ") for x in report_data]

        web_report_data[title] = report_data

        web_report_searches[title] = {}  #Initialize for searches under this title

    return (success, msg)

def web_get_item_in_report_data(title, header, item, search_range, web_report_data, web_report_searches):
    """ Get an item in the report. This will be stored in web_report_searches for future reference.

    Args:
        title - The string under which the data would be saved. This would serve as the key for future reference
        header - The header in the report under which the item is found. This would help find the item
        item - The string of the item to find.
        search_range - The distance of steps that the search will attempt to avoid picking up other data. This is set to 10 as default
        web_report_data - The dict of web report data where to get the item
        web_report_searches - The dict of web report searches where to save all the searches in web report data

    Return:
        True if successfully saved; False otherwise
    """
    r = False
    msg = "ErrMsg: Could not get report data '{0}' under '{1}' item '{2}'".format(title, header, item)
    if title in web_report_data:
        data = web_report_data[title]
        for header_index in [header_index for header_index,x in enumerate(data) if x == header]:  #There may be more than one instance of the header in the data
            for elem in data[header_index+1:header_index+search_range]:
                if item in elem:
                    split_elem = elem.split("=",2)
                    if item in split_elem[0]:
                        r = True
                        msg = "Found report data '{0}' under '{1}' item '{2}'".format(title, header, item)

                        search_result = elem.replace(item+" ", "")

                        if item in search_result:  #Replacement failed due to the lack of a space after the item
                            search_result = data[data.index(search_result)+1]  #This could be due to a newline character/formatting error, so the next line might be the desired value
                        else:
                            search_result = search_result.replace("= ", "")  #Some items may have "="; others may not

                        # Store search result
                        if title not in web_report_searches:
                            web_report_searches[title] = {}
                        if header not in web_report_searches[title]:
                            web_report_searches[title][header] = {}
                        web_report_searches[title][header][item] = search_result

                        break

    return (r, msg)

def web_get_between_items_in_report_data(title, header1, header2, web_report_data, web_report_searches):
    """ Get items between two headers or two items in the report. This will be stored in web_report_searches for future reference.

    Args:
        title - The string under which the data would be saved. This would serve as the key for future reference
        header1 - The header/item in the report under which the desired items are found. This would help find the items
        header2 - The header/item in the report before which the desired items are found.
        web_report_data - The dict of web report data where to get the items
        web_report_searches - The dict of web report searches where to save all the searches in web report data

    Return:
        True if successfully saved; False otherwise
    """
    r = False
    msg = "ErrMsg: Could not get report data '{0}' between '{1}' and '{2}'".format(title, header1, header2)
    if title in web_report_data:
        data = web_report_data[title]
        if title not in web_report_searches:
            web_report_searches[title] = {}
        if header1 not in web_report_searches[title]:
            web_report_searches[title][header1] = {}

        header1_index = data.index(header1)
        header2_index = data[header1_index+1:].index(header2)  #get index of header 2 after header 1
        search_result = data[header1_index+1:header1_index+header2_index+1]  #get between header 1 and header 2, exclusive

        web_report_searches[title][header1][header1] = "\n".join(search_result)

        r = True  #Searches variable now has value
        msg = "Found report data '{0}' between '{1}' and '{2}'".format(title, header1, header2)

    return (r, msg)

def web_check_item_in_report_data(title, header, item, val, web_report_searches):
    """ Check an item in the report. The variable web_report_searches will be accessed for the check.

    Args:
        title - The string under which the data would be saved. This would serve as the key for future reference
        header - The header in the report under which the item is found.
        item - The string of the item to find.
        val - The string to check the item against
        web_report_searches - The dict of web report searches where to check the item

    Return:
        True if the check was successful; False otherwise
    """
    r = False
    msg = "ErrMsg: In report data '{0}' under '{1}' item '{2}' value is '{3}', not '{4}'".format(title, header, item, web_report_searches[title][header][item], val)
    if val in web_report_searches[title][header][item]:
        r = True
        msg = "'{4}' is the same as report data '{0}' under '{1}' item '{2}' value, which is '{3}'".format(title, header, item, web_report_searches[title][header][item], val)
    return (r, msg)

def web_check_item_in_report_is_visible(title, text, check_type, web_report_data):
    """Checks if a certain menu is visible or not on the reports for negative testing

    Args:
        title - string that data was saved under
        text - string to find
        check_type - positive ("is") or negative ("is not") testing
        web_report_data - The dict of web report data where to check the item is visible or not

    Return:
        True if visible in report saved under the given title; False otherwise
    """
    success = False
    msg = "ErrMsg: Could not see menu"
    if title in web_report_data:
        data = web_report_data[title]
        found = False
        for d in data:
            if text in d:
                found = True
                break

        if check_type.lower() == "is":
            if found:
                success = True
                msg = "Found the text"
            else:
                msg = "ErrMsg: Could not find the text '{0}' in report '{1}' which is {2}".format(text, title, "\n".join(data))
        else:
            if not found:
                success = True
                msg = "Did not find the text"
            else:
                msg = "ErrMsg: Found the text '{0}' in report '{1}' which is {2}".format(text, title, "\n".join(data))
    else:
        msg = "'{}' does not exist in web_report_data".format(title)

    return (success, msg)

def web_save_report_data_to_file(title, output_file,web_report_data):
    """ Get the data from web_report_data and save to the output file

    Args:
        title - The string under which the data was saved
        output_file - The filename for the file into which the data would be saved
        web_report_data - The report to be saved in the file

    Return:
        True if successfully saved to file; False otherwise
    """
    success = False
    msg = "ErrMsg: Could not save to file"
    if title in web_report_data:
        with open(output_file, "w") as f:
            for item in web_report_data[title]:
                f.write("{}\n".format(item))

            success = True
            msg = "Successfully saved to file"
    else:
        msg = "'{}' does not exist in web_report_data".format(title)

    return (success, msg)