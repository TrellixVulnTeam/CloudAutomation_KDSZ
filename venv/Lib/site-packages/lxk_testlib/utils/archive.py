"""
Archive Utility Functions
================

Functions used to create and read compressed and archived files.
Makes use of Python standard library "shutil" to perform
archiving functions.

Please see documentation:
https://docs.python.org/3/library/shutil.html
"""

import os
import shutil
import tarfile
import logging

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def archive_dir(source, destination):
    """
    Compress files from source directory
    :Parameters:
        1. source      = source directory to be archived
        2. destination = full path of the output file where to save the file
    :Returns: (boolean)
    """
    base = os.path.basename(destination)
    name = base.split('.')[0]
    file_format = base.split('.')[1]

    LOGGER.debug(source)
    LOGGER.debug(base)
    LOGGER.debug(file_format)

    try:
        if file_format == 'zip':
            shutil.make_archive(name, file_format, source, '.')
            shutil.move('%s.%s'%(name,file_format), destination)
        else:
            # use python tarfile library to archive tar files
            # since make_archive in shutil will create an extra folder
            # when archiving file or directory in tar format
            with tarfile.open(name=destination, mode="w:gz") as tar_handle:
                tar_handle.add(source, arcname='')

        LOGGER.debug(destination)
        return True
    except (shutil.Error, Exception) as err:
        LOGGER.debug(err)
        return False

def extract(source_file, destination='.'):
    """
    Extracts archived file
    :Parameters:
        1. source_file = full path of the archived file to be extracted
        2. destination = full path of the destination folder; optional;
                         When not provided, file will be extracted
                         to the current directory.
    :Returns: (boolean)
    """
    LOGGER.debug(source_file)

    # If destination folder is not created yet, create the folder
    if not os.path.exists(destination):
        os.mkdir(destination)

    try:
        shutil.unpack_archive(source_file, destination)
        LOGGER.debug(destination)
        return True
    except (shutil.Error, Exception) as err:
        LOGGER.debug("Error:{}".format(err))
        return False

def read_file(file):
    """
    Reads and return data content of file from source archived file
    without extracting it.

    :Parameters:
        1. file = full path of source archived file

    :Returns: (tuple)
        1. Boolean = True if success; False otherwise
        2. Message = Data content of the file; Error message when
                     file was not successfully read.
    """
    LOGGER.debug(file)
    try:
        with open(file, "r") as zfile:
            data = zfile.read().replace("\\r\\n", "\\n")

        LOGGER.debug(data)
        return True, data
    except Exception as e:
        LOGGER.debug(e)
        return False, e

if __name__ == "__main__":

    # create logger
    from lxk_testlib.utils import logger
    logger.create(
        name=__name__,
        filename="archive.log",
        path=os.path.join(os.getcwd(), 'logs')
    )

    print (archive_dir(r"C:\\Users\\mmontebon\Desktop\\msc", r"C:\\Users\\mmontebon\\Downloads\\test_tar.tar.gz"))

    print (archive_dir(r"C:\\Git\\robot-common-utils\\CommonLibrary\\ssh.py", r"C:\\Git\\robot-common-utils\\CommonLibrary\\ssh.zip"))

    print (extract(r"C:\\Users\\mmontebon\\Downloads\\test_tar.tar.gz"))

    print(read_file(r"C:\\Users\\mmontebon\\Downloads\\test_zip\\ssh.py")[1])