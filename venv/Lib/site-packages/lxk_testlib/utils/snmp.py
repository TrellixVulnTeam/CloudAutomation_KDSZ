"""
SNMP Utility Functions
================

Functions use for snmp command execution

This uses paramiko to perform ssh functions.
https://easysnmp.readthedocs.io
"""

import logging
from easysnmp import Session

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def set_session(ip_address, com=None, ver=2, uname=None, a_password=None, sec_level=None, \
    a_protocol=None, priv_protocol = None, priv_password=None):
    """
    This method set the session to use snmp commands.
    
    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. community, ``<class 'str'>``
        3. version, ``<class 'int'>`` values 1, 2, 3
        4. auth_username, ``<class 'str'>``
        5. auth_password, ``<class 'str'>``
        6. security_level, ``<class 'str'>``
        7. auth_protocol, ``<class 'str'>``
        8. privacy_protocol, ``<class 'str'>``
        9. privacy_password, ``<class 'str'>``

    :Returns: Object ``<class 'Object'>``
    """
    LOGGER.debug("hostname={}, community={}, version={}, security_username={}, auth_password={}, \
    security_level={}, auth_protocol={}, privacy_protocol={}, privacy_password \
    ".format(ip_address, com, ver, uname, a_password, sec_level, priv_protocol, a_protocol, priv_password))
    session = Session(hostname=ip_address, community=com, version=ver, security_username=uname, \
    auth_password=a_password, security_level=sec_level, auth_protocol=a_protocol, privacy_protocol=priv_protocol, \
    privacy_password=priv_password)    
    return session
    
def walk(ip_address, oid, community=None, version=2, uname=None, a_password=None, \
    sec_level=None, a_protocol=None, priv_protocol=None, priv_password = None):
    """
    This method uses the snmp walk command.
    
    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. oid, ``<class 'str'>``
        3. community, ``<class 'str'>``
        4. version, ``<class 'int'>`` values 1, 2, 3
        5. auth_username, ``<class 'str'>``
        6. auth_password, ``<class 'str'>``
        7. security_level, ``<class 'str'>``
        8. auth_protocol, ``<class 'str'>``
        9. privacy_protocol, ``<class 'str'>``
        10. privacy_password, ``<class 'str'>``

    :Returns: Result ``<class 'bol', class 'Object'>``
    """
    try:
        LOGGER.debug("SNMP WALK ")        
        session = set_session(ip_address, community, version, uname, a_password, \
        sec_level, a_protocol, priv_protocol, priv_password)        
        LOGGER.debug("oid: {}".format(oid))
        results = session.walk(oid)
        LOGGER.debug("results: {}".format(results))
        return True, results
    except Exception as msg:
        LOGGER.debug("Exception: {}".format(msg))    
        return False, msg

def get(ip_address, oid, community='public', version=2, uname=None, password=None, \
    sec_level=None, a_protocol=None, a_password=None, priv_protocol = None):
    """
    This method uses the snmp get command.
    
    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. oid, ``<class 'str'>``
        3. community, ``<class 'str'>``
        4. version, ``<class 'int'>`` values 1, 2, 3
        5. auth_username, ``<class 'str'>``
        6. auth_password, ``<class 'str'>``
        7. security_level, ``<class 'str'>``
        8. auth_protocol, ``<class 'str'>``
        9. privacy_protocol, ``<class 'str'>``
        10. privacy_password, ``<class 'str'>``

    :Returns: Result ``<class 'bol', class 'Object'>``
    """
    try:
        LOGGER.debug("SNMP GET")
        session = set_session(ip_address, community, version, uname, password, \
        sec_level, a_protocol, a_password, priv_protocol)
        LOGGER.debug("oid: {}".format(oid))
        result = session.get(oid)
        LOGGER.debug("result: {}".format(result))
        return True, result
    except Exception as msg:
        LOGGER.debug("Exception: {}".format(msg))
        return False, msg

def set(ip_address, oid, value, community='public', version=2, uname=None, password=None, \
    sec_level=None, a_protocol=None, a_password=None, priv_protocol = None):
    """
    This method uses the snmp set command.
    
    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. oid, ``<class 'str'>``
        3. value, ``<class 'str'>``
        4. community, ``<class 'str'>``
        5. version, ``<class 'int'>`` values 1, 2, 3
        6. auth_username, ``<class 'str'>``
        7. auth_password, ``<class 'str'>``
        8. security_level, ``<class 'str'>``
        9. auth_protocol, ``<class 'str'>``
        10. privacy_protocol, ``<class 'str'>``
        11. privacy_password, ``<class 'str'>``

    :Returns: Result ``<class 'bol', class 'Object'>``
    """
    try:
        session = set_session(ip_address, community, version, uname, password, \
        sec_level, a_protocol, a_password, priv_protocol)
        result = session.get(oid)
        if result is None:
            return False, "{} not found!".format(oid)
        LOGGER.debug("SNMP SET")
        LOGGER.debug("oid: {}".format(oid))    
        LOGGER.debug("value: {}".format(value))
        return session.set(oid, value, type)
    except Exception as msg:
        LOGGER.debug("Exception: {}".format(msg))
        return False, msg

#result = walk("10.194.6.155", "1.3.6.1.2.1.25.1", None, 3, "defaultrwpassword", "defaultrwpassword", "auth_with_privacy", "MD5", "DES", "defaultrwpassword")
#result = set("10.194.6.155", "SNMPv2-MIB::sysContact.0", "Contact2", "public", 1)
#print(result)
#result = get("10.194.6.155", "SNMPv2-MIB::sysContact.0", "public", 1)
#result = get("10.194.6.155", "HOST-RESOURCES-MIB::hrPrinterStatus.1", "public", 2)
#print(result[1].value)
    