"""
VCC
----------
"""

import os
import json
import time
import logging
from lxk_testlib.utils import http_request

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def send_license_bundle(ip_address, license_bundle):
    """
    This method sends vcc bundles to the printer.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. file, ``<class 'str'>``

    :Returns: Success ``<class 'bol'>``
    """
    if not os.path.exists(license_bundle):
        LOGGER.debug("Could not find " + license_bundle + "!!!")
        assert False, "Could not find " + license_bundle + "!!!"

    url="http://{}/webservices/vcc/bundles".format(ip_address)
    response = http_request.post_file(url, license_bundle)

    LOGGER.debug(response)
    if response['status']==False:
        LOGGER.debug("Failed sending "+ license_bundle +"license bundle to "+ ip_address+ "!!!")
        ret = False
    else:
        LOGGER.debug("Successfully send's the vcc bundle to "+ ip_address +"!")
        ret = True
    LOGGER.debug(ret)
    return ret

def send_vcc_license(ip_address, license_lic):
    """
    This method sends vcc bundles to the printer.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. file, ``<class 'str'>``

    :Returns: Success ``<class 'bol'>``
    """
    if not os.path.exists(license_lic):
        LOGGER.debug("Could not find " + license_lic + "!!!")
        assert False, "Could not find " + license_lic + "!!!"

    url="http://{}/webservices/vcc/licenses".format(ip_address)
    response = http_request.post_file(url, license_lic)

    LOGGER.debug(response)
    if response['status']==False:
        LOGGER.debug("Failed sending "+ license_lic +"license bundle to "+ ip_address+ "!!!")
        ret = False
    else:
        LOGGER.debug("Successfully send's the vcc bundle to "+ ip_address +"!")
        ret = True
    LOGGER.debug(ret)
    return ret


def delete_vcc_license(ip_address, license_lic):
    """
    This method deletes vcc license from the printer.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. file, ``<class 'str'>``

    :Returns: Success ``<class 'bol'>``
    """
    if not os.path.exists(license_lic):
        LOGGER.debug("Could not find " + license_lic + "!!!")
        assert False, "Could not find " + license_lic + "!!!"
    with open(license_lic) as license_file:
        license_data = json.load(license_file)
    lid = license_data["data"]["id"]
    params = {"enctype":"multipart/form-data","id": lid}

    url="http://{}/webservices/vcc/licenses".format(ip_address)
    response = http_request.delete(url, params)

    if response['status']==False:
        LOGGER.debug("Failed deleting "+ license_lic +"license bundle from "+ ip_address+ "!!!")
        ret = False
    else:
        LOGGER.debug("Successfully deleted the vcc bundle from "+ ip_address +"!")
        ret = True
    LOGGER.debug(ret)
    return ret

def send_ucf_file(ip_address, ucf_file):
    """
    This method sends ucf file to the printer.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. file, ``<class 'str'>``

    :Returns: Success ``<class 'bol'>``
    """
    if not os.path.exists(ucf_file):
        LOGGER.debug("Could not find " + ucf_file + "!!!")
        assert False, "Could not find " + ucf_file + "!!!"

    url="http://{}/webservices/vcc/ucf".format(ip_address)
    response = http_request.post_file(url, ucf_file)

    LOGGER.debug(response)
    if response['status']==False:
        LOGGER.debug("Failed sending "+ ucf_file +"ucf file to "+ ip_address+ "!!!")
        ret = False
    else:
        LOGGER.debug("Successfully send's the ucf file to "+ ip_address +"!")
        ret = True
    LOGGER.debug(ret)
    return ret
