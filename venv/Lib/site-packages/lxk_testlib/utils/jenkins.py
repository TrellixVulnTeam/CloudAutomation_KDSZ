"""
Jenkins Helper Functions
================

"""
import re
import os
import logging
from lxk_testrunner.utils import http
from lxk_testrunner.dashboard2.api.builds import RE_FIRMWARE

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

LOCAL_URL = "Executed Locally."
JENKINS_URL=os.getenv("BUILD_URL", default=LOCAL_URL)
# sorted from highest reliability to lowest
RELEASE_PATTERN_LIST = [
    # 1
    r"RIP={release}".format(
        release=RE_FIRMWARE
    ),
    # 2
    r"RELEASE_URL = http://{url}/{code}/{release}".format(
        code=r"\w{2,3}",
        release=RE_FIRMWARE,
        url=r"(?:sentry04\.lrdc\.lexmark\.com|10\.194\.92\.15)",
    ),
    # 3
    r"test_start.sh -r http://{url}/{code}/{release}".format(
        code=r"\w{2,3}",
        release=RE_FIRMWARE,
        url=r"(?:sentry04\.lrdc\.lexmark\.com|10\.194\.92\.15)",
    ),
]

def _get_jenkins_console_text(url):
    """ Return console logs as string
    """
    assert url != LOCAL_URL
    jenkins_url = url + "/consoleText"
    status, body = http.get_request(jenkins_url)
    if status != 200:
        LOGGER.debug("Downloading %s failed!" % jenkins_url)
        return None
    assert isinstance(body, str)
    return body

def _parse_fw_from_jenkins():
    """ Find firmware release from Jenkins logs
    """
    body = _get_jenkins_console_text(
        url=JENKINS_URL
    )
    firmware_release = None
    # use multiple patterns to find firmware release
    for pattern in RELEASE_PATTERN_LIST:
        reobj = re.search(pattern, body, re.MULTILINE)
        if reobj is None:
            # current pattern did not find firmware release,
            # continue finding using the next pattern
            continue
        # firmware release found! break look and return value
        firmware_release = reobj.group(1)
        break
    return firmware_release