"""
HTTP Request Utility Functions
================

HTTP Application Functions and Other Web Related
"""

import json
import os
import logging
import urllib3
import urllib.parse
from urllib.parse import urlencode
import urllib.request
from urllib.error import HTTPError


LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)
JSON = {"Content-type": "application/json"}

def get(url):
    """
    Execute HTTP GET request.
    """
    LOGGER.debug(url)
    assert isinstance(url, str), "must be {type_}".format(type_=str)

    resp_status = False
    resp_body = None
    try:
        resp = urllib.request.urlopen(url)
        resp_code = resp.getcode()
        resp_body = resp.read().decode("utf-8")
        resp_status = True
        resp.close()
    except HTTPError as err:
        resp_code = err.code

    result = _build_response(resp_status, resp_code, resp_body)
    return result

def post(url, dict_, headers=None):
    """
    Execute HTTP POST request.
    """
    LOGGER.debug(url)
    LOGGER.debug(dict_)
    LOGGER.debug(headers)
    assert isinstance(url, str), "must be {type_}".format(type_=str)
    assert isinstance(dict_, dict), "must be {type_}".format(type_=dict)
    if headers is not None:
        assert isinstance(headers, dict), "must be {type_}".format(type_=dict)

    resp_status = False
    resp_body = None
    try:
        params = urlencode(dict_).encode("utf-8")
        print(params)
        req = urllib.request.Request(
            url=url,
            data=params            
        )
        resp = urllib.request.urlopen(req)
        resp_code = resp.getcode()
        resp_body = resp.read().decode("utf-8")
        resp_status = True
        resp.close()
    except HTTPError as err:
        resp_code = err.code

    result = _build_response(resp_status, resp_code, resp_body)
    return result

def post_file(url, file_path):
    """
    Execute HTTP POST request for uploading file
    """
    LOGGER.debug(url)
    LOGGER.debug(file_path)
    assert isinstance(url, str), "must be {type_}".format(type_=str)

    resp_status = False
    resp_body = None
    try:
        data = _read_file_bytestream(file_path)
        req = urllib.request.Request(url=url, data=data, method='POST')
        resp = urllib.request.urlopen(req)
        resp_code = resp.getcode()
        resp_body = resp.read().decode("utf-8")
        resp_status = True
    except HTTPError as err:
        resp_code = err.code
    except Exception as ex:
        resp_code = 0
        LOGGER.debug(ex)

    result = _build_response(resp_status, resp_code, resp_body)
    return result
    
    
def put_file(url, file_path):
    """
    Execute HTTP PUT request for uploading file
    """
    LOGGER.debug(url)
    LOGGER.debug(file_path)
    assert isinstance(url, str), "must be {type_}".format(type_=str)

    resp_status = False
    resp_body = None
    try:
        data = _read_file_bytestream(file_path)
        req = urllib.request.Request(url=url, data=data, method='PUT')
        resp = urllib.request.urlopen(req)
        resp_code = resp.getcode()
        resp_body = resp.read().decode("utf-8")
        resp_status = True
    except HTTPError as err:
        resp_code = err.code
    except Exception as ex:
        resp_code = 0
        LOGGER.debug(ex)

    result = _build_response(resp_status, resp_code, resp_body)
    return result

def delete(url, dict_=None):
    """
    Execute HTTP DELETE request.
    """
    LOGGER.debug(url)
    assert isinstance(url, str), "must be {type_}".format(type_=str)

    resp_status = False
    resp_body = None
    try:
        if dict_ is not None:
           params = urlencode(dict_).encode("utf-8")
           req = urllib.request.Request(url=url, data=params, method="DELETE")
        else:
           req = urllib.request.Request(url, method="DELETE")
        
        resp = urllib.request.urlopen(req)
        resp_code = resp.getcode()
        resp_body = resp.read().decode("utf-8")
        resp_status = True
    except HTTPError as err:
        resp_code = err.code

    result = _build_response(resp_status, resp_code, resp_body)
    return result

def patch(url, dict_, headers=None):
    """
    Execute HTTP PATCH request.
    """
    LOGGER.debug(url)
    LOGGER.debug(dict_)
    LOGGER.debug(headers)
    assert isinstance(url, str), "must be {type_}".format(type_=str)
    assert isinstance(dict_, dict), "must be {type_}".format(type_=dict)
    if headers is not None:
        assert isinstance(headers, dict), "must be {type_}".format(type_=dict)

    resp_status = False
    resp_body = None
    try:
        params = json.dumps(dict_).encode("utf-8")
        req = urllib.request.Request(
            url=url,
            data=params,
            headers=headers if headers is not None else JSON,
            method="PATCH"
        )
        resp = urllib.request.urlopen(req)
        resp_code = resp.getcode()
        resp_body = resp.read().decode("utf-8")
        resp_status = True
        resp.close()
    except HTTPError as err:
        resp_code = err.code

    result = _build_response(resp_status, resp_code, resp_body)
    return result

def _build_response(status, code, body):
    """
    Utility function used to build http responses.
    """
    result = {
        'status': status,
        'body': body,
        'code': code
    }
    LOGGER.debug(result)
    return result

def _read_file_bytestream(file_path):
    """
    Utility function used to file bytes
    """
    data = open(file_path, 'rb').read()
    return data

if __name__ == "__main__":

    # create logger
    #import os
    #from lxk_testlib.utils import logger
    #logger.create(
    #    name=__name__,
    #    filename="http_request.log",
    #    path=os.path.join(os.getcwd(), 'logs')
    #)

    # url = "https://httpbin.org/post"
    # data = {"test":"test_val_post"}
    # print(post(url, data))

    ## GET Request
    # url = "https://httpbin.org/get?test=test_get_val"
    # print(get(url)['body'])

    ## POST Request
    url = "http://10.194.21.99/webglue/applications/install"
    file = "/pfv/.firmwaretestcebu/sentrytestfiles/app-flashfiles/soco/emailTask.lwfd"
    post_file(url, file)
    
    #r = requests.post(url = url1, data = data1) 

    ## PUT Request for files
    # url = "https://httpbin.org/put"
    # file_path = r"C:\Users\mmontebon\Downloads\pacmans.jpg"
    # print(put_file(url, file_path)['code'])
