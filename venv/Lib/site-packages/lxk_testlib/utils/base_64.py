"""
Base_64 Utility Functions
================

Functions used to encode or decode string data
or to encrypt or decrypt password
It uses cryptography package to perform encryption/decryption.
"""

import base64
import logging

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def encodestring(text):
    """
    Encodes string

    :Parameters:
        1. text = string to be encoded.

    :Return: encoded string
    """
    #required to be bytes
    encoded = base64.b64encode(_string2bytes(text))
    LOGGER.debug(text)
    LOGGER.debug(encoded)
    return _string2utf8(encoded)

def decodestring(text):
    """
    Decodes string

    :Parameters:
        1. text = string to be decoded.

    :Return: decoded string
    """
    #required to be bytes
    decoded = base64.b64decode(_string2bytes(text))
    LOGGER.debug(text)
    LOGGER.debug(decoded)
    return _string2utf8(decoded)

def _string2utf8(data):
    """
    Helper function to convert data to uft-8 string

    :Parameters:
        1. data = data to convert

    :Return: (string)
    """
    try:
        return data.decode("utf-8")
    except AttributeError:
        return data

def _string2bytes(data):
    """
    Helper function to convert data to bytes

    :Parameters:
        1. data = data to convert

    :Return: (bytes)
    """
    try:
        return data.encode()
    except AttributeError:
        return data

if __name__ == "__main__":
    string = "encode this string"
    encoded = encodestring(string)
    print(encoded)
    print(decodestring(encoded))

    pwd = "encode this password"
    encrypted = encodestring(pwd)
    print(encrypted)
    print("\n")
    print(decodestring(encrypted))