"""
System Functions
================

"""

import logging
from subprocess import check_output, STDOUT
from subprocess import CalledProcessError as Error

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def execute(cmd):
    """
    Execute system command/program/binary.
    Raises Error (CalledProcessError) when command returns non-zero code.

    :Parameters:

        1. List of command(s) and its arguments.

    :Return:

        1. Standard output and error in string.

    :Examples:

        1. Execute and get output

            >>> from lxk_testlib.utils import system
            >>> output = system.execute(["ls", "-al"])

        2. Execute and get return code

            >>> from lxk_testlib.utils.import system
            >>> try:
            ...     output = system.execute(["ls", "-al"])
            ...     returncode = 0
            ... except system.Error as err:
            ...     output = None
            ...     returncode = err.returncode
            ...
            >>>
    """
    LOGGER.debug(cmd)
    assert isinstance(cmd, list), "%s type required!" % list
    output = check_output(cmd, stderr=STDOUT)
    LOGGER.debug(output)
    output = output.decode("utf-8") if isinstance(output, bytes) else output
    return output

if __name__ == "__main__":
    output = execute(["git", "none"])