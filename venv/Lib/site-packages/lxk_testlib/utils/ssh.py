"""
SSH Utility Functions
================

Functions used for ssh connection and command execution

This uses paramiko to perform ssh functions.
https://github.com/paramiko/paramiko
"""

import os
import logging
import paramiko
from lxk_testlib.utils import base_64
from lxk_testrunner import PRINTER_RSA
from lxk_testlib.constants import ssh_vars

DEFAULT_SSH_USER = base_64.decodestring(ssh_vars.USERNAME)
DEFAULT_SSH_PWD = base_64.decodestring(ssh_vars.PASSWORD)

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def execute(host, cmd, user=None, pwd=None, key_fname=os.getenv(PRINTER_RSA)):
    ssh_user = DEFAULT_SSH_USER if user is None else user
    ssh_pwd = DEFAULT_SSH_PWD if pwd is None else pwd

    LOGGER.debug(host)
    LOGGER.debug(ssh_user)
    LOGGER.debug(ssh_pwd)
    LOGGER.debug(key_fname)
    ssh_client = connect(host, ssh_user, ssh_pwd, key_fname)
    if ssh_client is not False:
        stdin,stdout,stderr=ssh_client.exec_command(cmd)

        LOGGER.debug(cmd)
        LOGGER.debug(stdout)

        # Return stdout lines
        out = ''.join(stdout.readlines())
        # Return stderr
        err = ''.join(stderr.readlines())

        # Close ssh connection
        ssh_client.close()        
        if err:
            LOGGER.debug(err)
            return False, err
        else:
            LOGGER.debug(out)
            return True, out
    else:
        LOGGER.debug("SSH connection error: {}".format(cmd))
        return False, "SSH connection error", None

def connect(host, user, pwd, key_fname):
    try:
        ## Connect to paramiko SSHClient
        ssh_client = paramiko.SSHClient()
        ## Set policy to use when connecting to servers without a known host key.
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname=host, port=22, username=user, password=pwd, key_filename=key_fname)
        LOGGER.debug("SSH Connected: {}".format(host))
        return ssh_client
    except paramiko.AuthenticationException as e:
        LOGGER.debug("Authentication failed: {}".format(e))
        return False
    except Exception as e:
        LOGGER.debug("SSH Connection Failed {}".format(e))
        return False

if __name__=='__main__':
    # setup paramiko logger
    import os
    paramiko.util.log_to_file(os.path.join(os.getcwd(), "logs", "paramiko.log"))

    # create logger
    from lxk_testlib.utils import logger
    logger.create(
        name=__name__,
        filename="ssh.log",
        path=os.path.join(os.getcwd(), "logs")
    )

    # create logger
    from lxk_testlib.utils import logger
    logger.create(
        name=__name__,
        filename="ssh.log",
        path=os.path.join(os.getcwd(), 'logs')
    )

    user = 'root'
    pwd = 'il2w4lilky'
    host = '10.194.6.202'
    cmd = input("Command:")
    result = execute(host, cmd, user, pwd)
    print(result[0])
    print(result[1])