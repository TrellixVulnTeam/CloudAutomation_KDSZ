from pyasn1.type import univ
from pysnmp.proto import rfc1902, rfc1905
from SnmpLibrary import SnmpLibrary
from SnmpLibrary import utils


class SNMPLibrary(SnmpLibrary):
    """
    Override SnmpLibrary to support context names
    """
    def __init__(self):
        SnmpLibrary.__init__(self)
        self.context_name = ''
        self.lookup_mib = False
        self.info_log_level = 'INFO'

    def set_context_name(self, context_name):
        self.context_name = context_name

    def set_lookup_mib(self, lookup_mib):
        self.lookup_mib = lookup_mib

    def get(self, oid, idx=(0,)):
        return self._get(oid, idx)

    def get_display_string(self, oid, idx=(0,)):
        return self._get(oid, idx, expect_display_string=True)

    def get_type(self, oid, idx=(0,)):
        self._info('Using SNMP GET request')

        if self._active_connection is None:
            raise RuntimeError('No transport host set')

        idx = utils.parse_idx(idx)
        oid = utils.parse_oid(oid) + idx

        error_indication, error, _, var = \
            self._active_connection.cmd_gen.getCmd(
                self._active_connection.authentication_data,
                self._active_connection.transport_target,
                oid,
                contextName=self.context_name,
                lookupMib=self.lookup_mib
            )

        if error_indication is not None:
            raise RuntimeError('SNMP GET failed: %s' % error_indication)
        if error != 0:
            raise RuntimeError('SNMP GET failed: %s' % error.prettyPrint())

        oid, obj = var[0]

        return type(obj).__name__

    def set(self, oid, value, idx=(0,)):
        if self._active_connection is None:
            raise RuntimeError('No transport host set')

        idx = utils.parse_idx(idx)
        oid = utils.parse_oid(oid) + idx
        self._set((oid, value))

    def set_many(self, *oid_value_pairs):
        if self._active_connection is None:
            raise RuntimeError('No transport host set')

        args = list(oid_value_pairs)
        oid_values = list()
        try:
            while len(args):
                oid = args.pop(0)
                value = args.pop(0)
                possible_idx = args[0] if len(args) > 0 else ''
                if possible_idx.startswith('idx='):
                    idx = args.pop(0)[4:]
                else:
                    idx = (0,)
                idx = utils.parse_idx(idx)
                oid = utils.parse_oid(oid) + idx
                oid_values.append((oid, value))
        except IndexError:
            raise RuntimeError('Invalid OID/value(/index) format')
        if len(oid_values) < 1:
            raise RuntimeError('You must specify at least one OID/value pair')

        self._set(*oid_values)

    def walk(self, oid):
        self._info('Using SNMP GETNEXT request')

        if self._active_connection is None:
            raise RuntimeError('No transport host set')

        oid = utils.parse_oid(oid)

        error_indication, error, _, var_bind_table = \
            self._active_connection.cmd_gen.nextCmd(
                self._active_connection.authentication_data,
                self._active_connection.transport_target,
                oid,
                contextName=self.context_name,
                lookupMib=self.lookup_mib
            )

        if error_indication:
            raise RuntimeError('SNMP WALK failed: %s' % error_indication)
        if error != 0:
            raise RuntimeError('SNMP WALK failed: %s' % error.prettyPrint())

        oids = list()
        for var_bind_table_row in var_bind_table:
            oid, obj = var_bind_table_row[0]
            oid = ''.join(('.', str(oid)))
            if obj.isSuperTypeOf(rfc1902.ObjectIdentifier()):
                obj = ''.join(('.', str(obj)))
            else:
                obj = obj.prettyOut(obj)
            oids.append((oid, obj))

        return oids

    def bulk_get(self, oid, non_repeaters=0, max_repetitions=10):
        self._info('Using SNMP GETBULK request')

        if self._active_connection is None:
            raise RuntimeError('No transport host set')

        oid = utils.parse_oid(oid)

        error_indication, error, _, var_bind_table = \
            self._active_connection.cmd_gen.bulkCmd(
                self._active_connection.authentication_data,
                self._active_connection.transport_target,
                non_repeaters,
                max_repetitions,
                oid,
                contextName=self.context_name,
                lookupMib=self.lookup_mib
            )

        if error_indication:
            raise RuntimeError('SNMP GETBULK failed: %s' % error_indication)
        if error != 0:
            raise RuntimeError('SNMP GETBULK failed: %s' % error.prettyPrint())

        oids = list()
        for var_bind_table_row in var_bind_table:
            oid, obj = var_bind_table_row[0]
            oid = ''.join(('.', str(oid)))
            if obj.isSuperTypeOf(rfc1902.ObjectIdentifier()):
                obj = ''.join(('.', str(obj)))
            else:
                obj = obj.prettyOut(obj)
            oids.append((oid, obj))

        return oids

    def prefetch_oid_table(self, oid):
        oids = self.walk(oid)
        self._active_connection.prefetched_table[oid] = oids

    def find_oid_by_value(self, oid, value, strip=False):
        if oid in self._active_connection.prefetched_table:
            oids = self._active_connection.prefetched_table[oid]
        else:
            oids = self.walk(oid)

        for oid in oids:
            s = str(oid[1])
            if strip is True:
                s = s.strip()
            if s == str(value):
                return oid[0]

        raise RuntimeError('Value "%s" not found.' % value)

    def _get(self, oid, idx=(0,), expect_display_string=False):
        self._info('Using SNMP GET request')

        if self._active_connection is None:
            raise RuntimeError('No transport host set')

        idx = utils.parse_idx(idx)
        oid = utils.parse_oid(oid) + idx

        error_indication, error, _, var = \
            self._active_connection.cmd_gen.getCmd(
                self._active_connection.authentication_data,
                self._active_connection.transport_target,
                oid,
                contextName=self.context_name,
                lookupMib=self.lookup_mib
            )

        if error_indication is not None:
            raise RuntimeError('SNMP GET failed: %s' % error_indication)
        if error != 0:
            raise RuntimeError('SNMP GET failed: %s' % error.prettyPrint())

        oid, obj = var[0]

        if isinstance(obj, rfc1905.NoSuchInstance):
            raise RuntimeError('Object with OID %s not found' %
                               utils.format_oid(oid))

        if expect_display_string:
            try:
                if(int(obj.prettyPrint(), 16)):
                    raw_string = obj.asOctets()
                    value = ' '.join( '{:02x}'.format(x) for x in raw_string ).upper()
                    try:
                        value = self.convertHexStringToDatetime(value)
                    except:
                        pass
            except:
                value = obj.prettyOut(obj)
        elif univ.OctetString().isSuperTypeOf(obj):
            value = obj.asNumbers()
        else:
            value = obj.prettyOut(obj)

        self._info('OID %s has value %s' % (utils.format_oid(oid), value))

        return value

    def _set(self, *oid_values):
        self._info('Using SNMP SET request')

        for oid, value in oid_values:
            self._info('Setting OID %s to %s' % (utils.format_oid(oid), value))

        error_indication, error, _, var = \
            self._active_connection.cmd_gen.setCmd(
                self._active_connection.authentication_data,
                self._active_connection.transport_target,
                *oid_values,
                contextName=self.context_name,
                lookupMib=self.lookup_mib
            )

        if error_indication is not None:
            raise RuntimeError('SNMP SET failed: %s' % error_indication)
        if error != 0:
            raise RuntimeError('SNMP SET failed: %s' % error.prettyPrint())

    def _info(self, msg):
        self._log(msg, self.info_log_level)

    def set_info_log(self, log_level):
        self.info_log_level = log_level

    def convertHexStringToDatetime(self, hexString):
        hexString = hexString.replace(' ', '')
        result = [hexString[0:4]] + [hexString[i:i+2] for i in range(4, len(hexString), 2)]
        result = [int(s, 16) for s in result]
        result[7] = chr(result[7])
        value = "{year}-{month}-{day},{hour}:{minutes}".format(
            year = result[0],
            month = result[1],
            day = result[2],
            hour = result[3],
            minutes = result[4] )
        return value