""" UPS verification actions.
"""

from lxk_testlib.panelnav.core import exceptions
from lxk_testlib.panelnav.core.models.actions import AbstractAction

_ERROR = """Add the ff locator code:
locator.add_action(
    action={action},
    specifier={specifier}
)
"""

class GenericVerify(AbstractAction):
    """ UPS attribute verification action
    Can only be used on a locator with a preset specifier with this action.
    """

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        if not preset:
            # TODO: add the correct specifier
            raise exceptions.LocatorActionSpecifierRequired(_ERROR.format(
                action="Action.GenericVerify",
                specifier="%s"
            ))
        try:
            return self.DO_PHRASE.format(
                action=preset % (tuple(args))
            )
        except TypeError:
            raise exceptions.ActionArgumentsCountMismatch(
                self.ARG_MISMATCH.format(
                    given=args,
                    required=preset
                )
            )


class AndroidVerifyWidgetFound(AbstractAction):
    """ UPS locator verification for Android.
    """

    def __init__(self):
        self.action = "nothing"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        return self.DO_PHRASE.format(action=self.action)

class SmallTouchVerifyWidgetFound(AbstractAction):
    """ UPS locator verification for small-touch (panel28).
    """

    def __init__(self):
        self.action = "verify_found"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        return self.DO_PHRASE.format(action=self.action)

class NonTouchVerifyWidgetFound(AbstractAction):
    """ UPS locator verification for non-touch (panel2L and panel24).
    """

    def __init__(self):
        self.action = "verify count=1"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        return self.DO_PHRASE.format(action=self.action)

class AndroidVerifyWidgetNotFound(AbstractAction):
    """ UPS locator verification for Android.
    """

    def __init__(self):
        self.action = "verify none such exists"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        return self.DO_PHRASE.format(action=self.action)

class SmallTouchVerifyWidgetNotFound(AbstractAction):
    """ UPS locator verification for small-touch (panel28).
    """

    def __init__(self):
        self.action = "verify_not_found"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        return self.DO_PHRASE.format(action=self.action)

class NonTouchVerifyWidgetNotFound(AbstractAction):
    """ UPS locator verification for non-touch (panel2L and panel24).
    """

    def __init__(self):
        self.action = "verify count=0"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        return self.DO_PHRASE.format(action=self.action)

class NonTouchVerifyWidgetCount(AbstractAction):
    """ UPS locator count verification for non-touch (panel2L and panel24).
    """

    def __init__(self):
        self.action = "verify count=%s"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        try:
            return self.DO_PHRASE.format(
                action=self.action % (tuple(args))
            )
        except TypeError:
            raise exceptions.ActionArgumentsCountMismatch(
                self.ARG_MISMATCH.format(
                    given=args,
                    required=preset
                )
            )
