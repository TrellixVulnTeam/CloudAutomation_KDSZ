""" UPS Press/Select actions.
Used for traversal.
"""
from lxk_testlib.panelnav.core import exceptions
from lxk_testlib.panelnav.core.models.actions import AbstractAction

class TouchPress(AbstractAction):
    """ UPS press action for touch panels.
    """

    def __init__(self):
        self.action = "press"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        if preset:
            try:
                return self.DO_PHRASE.format(
                    action=preset % (tuple(args))
                )
            except TypeError:
                raise exceptions.ActionArgumentsCountMismatch(
                    self.ARG_MISMATCH.format(
                        given=args,
                        required=preset
                    )
                )
        else:
            return self.DO_PHRASE.format(
                action=self.action
            )

class NonTouchVSelect(AbstractAction):
    """ UPS vertical select for non-touch panels (panel24).
    """

    def __init__(self):
        self.action = "v-select"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        if preset:
            try:
                return self.DO_PHRASE.format(
                    action=preset % (tuple(args))
                )
            except TypeError:
                raise exceptions.ActionArgumentsCountMismatch(
                    self.ARG_MISMATCH.format(
                        given=args,
                        required=preset
                    )
                )
        else:
            return self.DO_PHRASE.format(
                action=self.action
            )

class NonTouchHSelect(AbstractAction):
    """ UPS horizontal select for non-touch panels (panel2L).
    """

    def __init__(self):
        self.action = "h-select"

    def get_phrase(self, *args, preset=None):
        """ Return action phrase.
        """
        if preset:
            try:
                return self.DO_PHRASE.format(
                    action=preset % (tuple(args))
                )
            except TypeError:
                raise exceptions.ActionArgumentsCountMismatch(
                    self.ARG_MISMATCH.format(
                        given=args,
                        required=preset
                    )
                )
        else:
            return self.DO_PHRASE.format(
                action=self.action
            )
