""" Action Models
"""

from abc import ABC, abstractmethod
from lxk_testlib.panelnav.core import exceptions
from lxk_testlib.panelnav.core.enum import Action, PanelSize
 
class AbstractAction(ABC):
    """ All UPS actions definitions should inherit this class.
    """
    
    DO_PHRASE = "Do \"{action}\""
    ARG_MISMATCH = "Given: {given}, Required: {required}"

    @abstractmethod
    def get_phrase(self, *args, action=None, preset=None):
        """ Return action phrase.
        """
        pass

class ActionBuilder:
    """ Builder that contains UPS action implementation based on panel size.
    """

    def __init__(self):
        self._actions = {}

    def add_panelsize(self, panelsize, action):
        """ Add implementation.
        """
        assert isinstance(panelsize, PanelSize)
        assert isinstance(action, AbstractAction)
        self._actions[panelsize.value] = action

    def get_panelsize(self, psize):
        """ Get implementation.
        """
        implementation = self._actions.get(psize)
        if not implementation:
            raise exceptions.ActionNotImplemented(psize)
        return implementation

class ActionFactory:
    """ Factory that contains UPS actions by name.
    """

    def __init__(self):
        self._builders = {}

    def add_action(self, action, builder):
        """ Add builder.
        """
        assert isinstance(action, Action)
        assert isinstance(builder, ActionBuilder)
        self._builders[action.value] = builder

    def get_action(self, action):
        """ Get builder.
        """
        assert isinstance(action, Action)
        builder = self._builders.get(action.value)
        if not builder:
            raise exceptions.ActionNotImplemented(action.name)
        return builder
