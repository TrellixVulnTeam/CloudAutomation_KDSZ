""" Screen models
"""

from lxk_testlib.panelnav.core import exceptions
from lxk_testlib.panelnav.core.enum import Action

class Screen:
    """ Screen object
    """

    REPR = "Current Screen Locators: {locators}, Loaded Popup: {popup}."

    def __init__(self):
        self._locators = {}
        self._marker = None
        self._stringslookup = {}
        self._loaded_popup = None

    def __repr__(self):
        popup = None
        if self._loaded_popup:
            popup = [name for name in self._loaded_popup._locators]
        return self.REPR.format(
            locators=[name for name in self._locators],
            popup=popup
        )

    def add_locator(self, name, marker=False):
        """ Add locator to screen
        """
        # return locator object
        if marker:
            if self._marker:
                msg = "Another locator <%s> is already set as marker." % (
                    self._marker
                )
                raise exceptions.MultipleMarkerError(msg)

            self._marker = name

        locator = Locator(name)
        self._locators[name] = locator
        return locator

    def get_locator(self, name, raise_exception=True, popup_only=False):
        """ Get locator from screen
        """
        # search locator in popup_screen first
        locator = None
        if self.loaded_popup:
            locator = self.loaded_popup.get_locator(name, raise_exception=False)
            if locator:
                return locator

        if popup_only and (locator is None or self.loaded_popup is None):
            # do not continue searching in self._locators
            return None

        # else, search in self._locators
        try:
            return self._locators[name]
        except KeyError:
            if raise_exception:
                raise exceptions.LocatorNotImplemented(name)
            else:
                return None

    @property
    def marker(self):
        """ Return screen locator marker
        """
        return self._marker

    @property
    def loaded_popup(self):
        """ Return loaded popup screen
        """
        return self._loaded_popup

    @property
    def strings(self):
        """ Return screen strings lookup
        """
        return self._stringslookup

    @loaded_popup.setter
    def loaded_popup(self, screen):
        if screen: assert isinstance(screen, Screen)
        self._loaded_popup = screen if screen else None

    @strings.setter
    def strings(self, lookup):
        if not isinstance(lookup, dict):
            msg = "screen.strings should be %s and not %s!" % (
                dict,
                type(lookup)
            )
            raise exceptions.StringsLookupTypeError(msg)
        self._stringslookup = lookup

class LocatorDefinition:
    """ Locator Definition Object.
    Separated from Locator object itself to allow variations based on filters.
    """

    def __init__(self):
        self._phrase = ""
        self._actions = {}
        self._ups = {"area":None, "widget":None, "text":None}

    def __repr__(self):
        return self._phrase

    def add_action(self, action, specifier):
        """ Preset action specifier
        """
        # return actionpreset object
        assert isinstance(action, Action)
        assert isinstance(specifier, str)
        actionpreset = ActionPreset(action.value, specifier)
        self._actions[action.value] = actionpreset

    def get_action_specifier(self, action):
        """ Return preset action specifier
        """
        assert isinstance(action, Action)
        actionpreset = self._actions.get(action.value)
        return actionpreset.specifier if actionpreset else None

    @property
    def area(self):
        """ Return UPS area phrase
        """
        return self._ups["area"]

    @property
    def widget(self):
        """ Return UPS widget phrase
        """
        return self._ups["widget"]

    @property
    def text(self):
        """ Return UPS text phrase
        """
        return self._ups["text"]

    @area.setter
    def area(self, phrase):
        assert isinstance(phrase, str)
        self._ups["area"] = phrase
        self._phrase += ("In area \"%s\" " % phrase) if phrase else ""

    @widget.setter
    def widget(self, phrase):
        assert isinstance(phrase, str)
        self._ups["widget"] = phrase
        self._phrase += ("Find widget \"%s\" " % phrase) if phrase else ""

    @text.setter
    def text(self, phrase):
        assert isinstance(phrase, str)
        self._ups["text"] = phrase
        self._phrase += ("On text \"%s\" " % phrase) if phrase else ""

class Locator(LocatorDefinition):

    TEXT_REP = "%s"
    WIDGET_REP = "text='%s'"

    def __init__(self, name):
        LocatorDefinition.__init__(self)
        self.name = name
        self._default = None
        self._variations = []
        self._next_screen = None
        self._popup_screen = None

    def __repr__(self):
        return str(self.name)

    def add_variation(self, filters):
        """ Add locator variation based on filters.
        """
        assert isinstance(filters, list)
        defintion = LocatorDefinition()
        self._variations.append((filters, defintion))
        return defintion

    def get_phrase(self, vtext=None, filters=None, exclude_area=False, lookup=None):
        """ Return locator phrase based from filters. If filter has no matches,
        default locator is returned.
        """
        area = None
        widget = None
        text = None
        phrase = ""
        if lookup:
            # if string lookup string is available, get vtext replacement
            assert isinstance(lookup, dict)
            substring = lookup.get(vtext) # substitute string
            vtext = substring if substring else vtext

        if filters and self._variations:
            assert isinstance(filters, list)
            for variation in self._variations:
                if set(variation[0]).issubset(set(filters)):
                    var = variation[1]
                    area = var.area if (var.area and not exclude_area) else None
                    widget = var.widget if var.widget else None
                    text = var.text if var.text else None
                    break
        else:
            area = self.area if (self.area and not exclude_area) else ""
            widget = self.widget if self.widget else ""
            text = self.text if self.text else ""

        # check for exceptions
        if vtext is None:
            # exception 1: panel navigation keyword argument vtext is not given
            #              and locator.text or locator.widget contains "%s"
            if (self.TEXT_REP in text) or (self.WIDGET_REP in widget):
                raise exceptions.KeywordArgVTextRequired(self.name)
        if vtext is not None:
            # exception 2: panel navigation keyword argument vtext is given
            #              and both locator.text and locator.widget contains
            #              "%s"
            if (self.TEXT_REP in text) and (self.WIDGET_REP in widget):
                raise exceptions.LocatorTextWidgetMutExclusive(self.name)
            # exception 3: panel navigation keyword argument vtext is given
            #              and neither locator.text nor locator.widget does not
            #              contain "%s"
            if (self.TEXT_REP not in text)\
               and (self.WIDGET_REP not in widget):
                raise exceptions.LocatorTextWidgetNotVariable(self.name)

        # apply variable text; no errors up to this point
        if self.TEXT_REP in text:
            text = text % vtext
        elif self.WIDGET_REP in widget:
            try:
                widget = widget % vtext
            except TypeError:
                # another exception: multiple "%s" in locator.widget is not
                #                    allowed
                raise exceptions.MultiLocatorVarTextError(self.name)
        # else:
        #     assert False, "Should not go here!"

        phrase += ("In area \"%s\" " % area) if area else ""
        phrase += ("On text \"%s\" " % text) if text else ""
        phrase += ("Find widget \"%s\" " % widget) if widget else ""
        return phrase

    @property
    def next_screen(self):
        """ Return next screen.
        Mutually exclusive with popup_screen.
        """
        return self._next_screen

    @property
    def popup_screen(self):
        """ Return popup screen.
        Mutually exclusive with next_screen.
        """
        return self._popup_screen

    @next_screen.setter
    def next_screen(self, module):
        if module: assert isinstance(module.screen, Screen)
        if self._popup_screen:
            msg = "locator.popup_screen already set."
            raise exceptions.MutuallyExclusivePropertyError(msg)

        self._next_screen = module.screen if module else None

    @popup_screen.setter
    def popup_screen(self, module):
        if module: assert isinstance(module.screen, Screen)
        if self._next_screen:
            msg = "locator.next_screen already set."
            raise exceptions.MutuallyExclusivePropertyError(msg)

        self._popup_screen = module.screen if module else None

class ActionPreset:
    """ UPS Action Preset specifier object
    """

    def __init__(self, name, specifier):
        self.name = name
        self.specifier = specifier

    def __repr__(self):
        return str(self.name)
