""" State model
"""

import re
import logging
from abc import ABC, abstractmethod
from lxk_testlib.panelnav.core.enum import Filter
from lxk_testlib.panelnav.core.decorators import classproperty

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)
RE_FIRMWARE = r"([C|M][X|S][T|N|L](\w+)).(\w+).(\w+)"

class State(ABC):
    """ All states should inherit this class.
    All State instances will share all properties below.
    """

    _PANEL = None
    _ACTION = None
    _PRINTER = None
    _PSIZE = None
    _FUNCTION = None
    _COLOR = None
    _FAMILY = None
    _UPS = None
    _TS = None
    _NEXT_SCREEN = None
    _RETURN_VALUE = None

    def __repr__(self):
        return self.__class__.__name__

    @classproperty
    def panel(cls):
        """ Returns panel object
        """
        return cls._PANEL

    @classproperty
    def action(cls):
        """ Returns action object
        """
        return cls._ACTION

    @classproperty
    def printer_ip(cls):
        """ Returns printer IPv4 Address
        """
        return cls._PRINTER

    @classproperty
    def panel_size(cls):
        """ Returns printer panel size (i.e. panel2L, panel24, panel28, etc)
        """
        return cls._PSIZE

    @classproperty
    def function(cls):
        """ Returns printer panel function (i.e. MFP, SFP)
        """
        return cls._FUNCTION

    @classproperty
    def color(cls):
        """ Returns printer panel color type (i.e. COLOR, MONO)
        """
        return cls._COLOR

    @classproperty
    def family(cls):
        """ Returns printer product family name
        """
        return cls._FAMILY

    @classproperty
    def ups(cls):
        """ Retruns UPS object
        """
        return cls._UPS

    @classproperty
    def timestamp(cls):
        """ Returns last navigation timestamp
        """
        return cls._TS

    @classproperty
    def pending_screen(cls):
        """ Returns next screen in traversal
        """
        return cls._NEXT_SCREEN

    @classproperty
    def return_value(cls):
        """ Returns state machine return value
        """
        return cls._RETURN_VALUE

    @panel.setter
    def panel(cls, value):
        cls._PANEL = value

    @action.setter
    def action(cls, value):
        cls._ACTION = value

    @printer_ip.setter
    def printer_ip(cls, value):
        cls._PRINTER = value

    @panel_size.setter
    def panel_size(cls, value):
        cls._PSIZE = value

    @function.setter
    def function(cls, is_mfp):
        cls._FUNCTION = Filter.MFP if is_mfp else Filter.SFP
        LOGGER.debug(cls._FUNCTION)

    @color.setter
    def color(cls, is_color):
        cls._COLOR = Filter.COLOR if is_color else Filter.MONO
        LOGGER.debug(cls._COLOR)

    @family.setter
    def family(cls, firmware):
        reobj = re.match(RE_FIRMWARE, firmware)
        cls._FAMILY = reobj.group(2) if reobj is not None else None
        LOGGER.debug(cls._FAMILY)

    @ups.setter
    def ups(cls, value):
        cls._UPS = value

    @timestamp.setter
    def timestamp(cls, value):
        cls._TS = value

    @pending_screen.setter
    def pending_screen(cls, value):
        cls._NEXT_SCREEN = value

    @return_value.setter
    def return_value(cls, value):
        cls._RETURN_VALUE = value

    @abstractmethod
    def run(self, action, *args, locator, vtext):
        pass
        
    @abstractmethod
    def next(self):
        pass
