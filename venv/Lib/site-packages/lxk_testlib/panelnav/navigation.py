""" Main Interface
"""

import time
import logging
from lxk_universal_panel_step import UPS
from lxk_testlib.panelnav import actions, locators
from lxk_testlib.panelnav.core import statemachine, exceptions
from lxk_testlib.panelnav.core.models.state import State

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)
LIB_INIT = "PanelNavigation().initialize(panelsize, printerip, is_mfp, is_color, firmware)"

class PanelNavigation:
    """ State Machine
    """

    def __init__(self):
        self.initialized = False

    def initialize(self, panelsize, printerip, is_mfp, is_color, firmware):
        """ Initialize state machine.
        """
        LOGGER.debug(panelsize)
        LOGGER.debug(printerip)
        LOGGER.debug(is_mfp)
        LOGGER.debug(is_color)
        LOGGER.debug(firmware)
        State.panel = locators.get_panel(panelsize)
        State.action = actions.get_actions()
        State.printer_ip = printerip
        State.panel_size = panelsize
        State.function = is_mfp
        State.color = is_color
        State.family = firmware
        State.ups = UPS(printer_ip=printerip)
        State.ups.initialize()
        State.timestamp = time.time()
        State.next_screen = "HOME"
        State.pending_screen = None
        State.return_value = None

        # set initialization flag
        self.initialized = True

    def run(self, action, *args, locator=None, vtext=None):
        """ Run state machine.
        """
        LOGGER.debug(action)
        LOGGER.debug(args)
        LOGGER.debug(locator)
        LOGGER.debug(vtext)
        if not self.initialized:
            msg = "Please initialize the object:\n%s" % LIB_INIT
            raise exceptions.PanelNavigationNotInitialized(msg)

        currentstate = statemachine.Start()
        while not isinstance(currentstate, statemachine.End):
            LOGGER.debug("State: %s" % currentstate)
            currentstate.run(action, *args, locator=locator, vtext=vtext)
            currentstate = currentstate.next()
        return State.return_value
