"""
App Module
==========
"""

import os
import logging
import time
from datetime import datetime
from urllib.request import urlopen
from lxk_testlib import status, rob
from lxk_testlib.utils import http_request, socket

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def install_app(ip_address, file, app_id=None):
    """
    This method install esf app to the printer
    If it has an app_id, it will check for build date of the app, else
    It will check if there's a change of number of apps installed
    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. file, ``<class str>``
        3. app_id, ``<class str>``

    :Returns: ``bol``
    """
    if not os.path.exists(file):
        LOGGER.debug("{} not found!!!".format(file))
        assert False, "{} not found!!!".format(file)

    LOGGER.debug(ip_address)
    LOGGER.debug("Before installing the App")

    if app_id is not None:
        prvdate= get_build_date(ip_address, app_id)
        LOGGER.debug(prvdate)
    
    prvnum = get_count_of_installed_app(ip_address)
    LOGGER.debug('Installed App count :{}'.format(prvnum))
    success = socket.send(ip_address, file, False)
    LOGGER.debug("After sending fls file to printer")
    time.sleep(2)
    if success:
        status.wait_for_ready(ip_address)
        for x in range(10):
            time.sleep(1)
            curnum= get_count_of_installed_app(ip_address)
            LOGGER.debug('Installed App count :{}'.format(curnum))
            if app_id is None:
                if curnum != prvnum:
                    return True
            else:
                curdate= get_build_date(ip_address, app_id)
                LOGGER.debug(curdate)
                if prvdate[0]:
                    LOGGER.debug("previous installation:{}".format(prvdate[1]))
                    if prvdate[1] <= curdate[1]:
                        return True
                else:
                    LOGGER.debug("No Previous Installation of App")
                    return True
        else:
            if app_id is None:
                assert False, 'Error: App not installed!!!'
            else:
                assert False, 'The build date of {} installed is {}'.format(app_id, curdate)
    else:
        assert False, 'Error: App not installed!!!'


def get_build_date(ip_address, app_id):
    """
    This method get's the build date of the app installed in the Printer

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. app_id, ``<class str>``

    :Returns: ``str``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(app_id)
    try:
        response = http_request.get(
            "http://{}/esf/prtapp/apps/resourceservlet?bundle={}&resource=vendorSupport.html".format(ip_address, app_id)
        )
        LOGGER.debug(response)
        ret2 = response[2].split("-")
        ret3 = ret2[1].split("<p>") 
        ret4 = ret3[0]
        ret5 = ret4[1:]
        ret6 = ret5.replace("@"," ")
        buildDate = datetime.strptime(ret6, '%d %b %Y %I:%M:%S')
        LOGGER.debug(buildDate)
        return True, buildDate
    except Exception as msg:
        LOGGER.debug(msg)
        return False, msg

def get_count_of_installed_app(ip_address):
    """
    This method will count the numbers of application installed.
    
    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``int``
    
    """
    num = 0
    stringtofind="name : :" 
    cmd = ''' call destinations.ProfileFactory getDestinationList "n" '''
    LOGGER.debug(cmd)
    returnoutput = rob.execute(ip_address, cmd)
    LOGGER.debug(returnoutput)
    returnoutput = returnoutput[1].split('\n')
    for output in returnoutput:    
        if output.find(stringtofind)!= -1: 
            LOGGER.debug(output)
            num = num + 1
    if num ==1:
        return 0
    else:
        num = num -1
        return num

def get_list_of_installed_apps(ip_address):
    """
    This method will list all installed apps.

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``str``

    """
    appname = ''
    stringtofind="name : :"
    cmd = ''' call destinations.ProfileFactory getDestinationList "n" '''
    LOGGER.debug(cmd)
    returnoutput = rob.execute(ip_address, cmd)
    LOGGER.debug(returnoutput)
    returnoutput = returnoutput[1].split('\n')
    for output in returnoutput:
        if output.find(stringtofind)!= -1:
            LOGGER.debug(output)
            output = output.replace(stringtofind,'')
            output = output.replace(' ' ,'')
            appname = appname + " "+ output
    return appname

def app_profile(ip_address, stat):
    """
    This method show's or hide's app profile icon

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. stat, ``<class 'str'>``

    :Returns: ``bol``

    """
    LOGGER.debug(ip_address)
    LOGGER.debug(stat)
    value = "1"
    if stat.lower() == 'hide':
        value = "0"
    url = "http://{}/webglue/content".format(ip_address)
    data = {"data":'{"HomeScreenPreferences_AppProfiles":'+ value +'}',"c":"HomeScreenPreferences"}
    result = http_request.post(url, data)
    LOGGER.debug(result)
    if result['body'] is not None and result['body'] !='{}':
        return True, result['body']
    else:
        return False, result['body']

def uninstall_app(ip_address, appname):
    """
    This method uninstall esf app from the printer
    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. appname, ``<class str>``

    :Returns: ``bol``
    """
    LOGGER.debug(ip_address)
    prvnum = get_count_of_installed_app(ip_address)
    LOGGER.debug('Installed App count :{}'.format(prvnum))
    url = "http://{}/webglue/content".format(ip_address)
    data = {"c":"{}-{}TopButtonGroupRightButton1".format(appname, appname)}
    LOGGER.debug("Unstalling the {}".format(appname))
    result = http_request.post(url, data)
    LOGGER.debug(result)
    status.wait_for_ready(ip_address)
    LOGGER.debug("After uninstall of app")
    current = get_count_of_installed_app(ip_address)
    LOGGER.debug('Installed App count :{}'.format(prvnum))
    if current < prvnum:
        return True
    else:
        return False, "Could not uninstall App"

def uninstall_soco(ip_address, file):
    """
    This method uninstall soco workflow.

    :Parameters:
        1. ip_address, ``<class 'str'>``
        2. file, ``<class str>``

    :Returns: ``bol``
    """
    if zipfile.is_zipfile(file):
        LOGGER.debug('zip file : True')
        file = zipfile.ZipFile(source)
        bundleId = ""
        for name in file.namelist():
            if name == "Descriptor.xml":
                data = file.read(name)
                strtmp = repr(data)
                startMarker = "<InstanceId><![CDATA["
                endMarker = "]]></InstanceId>"
                bundleId = strtmp[strtmp.index(startMarker) + len(startMarker):strtmp.index(endMarker)]
                LOGGER.debug(bundleId)
                break
        success = uninstall_app(ip_address, bundleId)
        if success:
            return True,
        else:
            return False, "Could not uninstall Soco workflow"
    else:
        return False, "{} is not a zip file!!!"

def install_soco(ip_address, file):
    """
    This method install soco workflow.
    
    :Parameters:
        1. ip_address, ``<class 'str'>``
        2. file, ``<class str>``

    :Returns: ``bol``
    """
    url = 'http://{}/webglue/applications/install'.format(ip_address)
    result = http_request.post_file(url, file)
    LOGGER.debug(result)
    if result[0]:
        url = "http://{}/webservices/ui-wdl/install".format(ip_address)
        result = http_request.get(url)
        LOGGER.debug(result)
        if result[1].result == 1:
            return True
        else:
            return False, "Could not install Soco Workflow!"
    else:
        return False, "Could not install Soco Workflow!"
