"""
IR Module
==========


"""

import re
import time
import urllib
import logging
from lxml import etree
from lxk_testlib import rob
from xml.etree import ElementTree
from lxk_testlib.utils import http_request
from lxk_universal_panel_step import UPS as UPS_
from lxk_testlib.intervention.graphic_id_list import graphic_id_dict

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def request_panel_xml(ip_address):
    
    url = "http://{ip_address}/webservices/automation/data/panel.xml".format(ip_address=ip_address)
    LOGGER.debug(url)

    response = http_request.get(url)
    #LOGGER.debug(response['body'])
    tree = ElementTree.fromstring(response['body'])

    return (tree)

def get_status_messages(ip_address, panelsize):
    """ Store the status messages on the Status/Supplies screen """

    tree = request_panel_xml(ip_address) 
    status_messages = []
    rep_dict = {" . . ": "", "Press ENTER to view more information.": "",", Use UP and DOWN arrows to navigate to other items.": "","Error. ":"","Warning. ":""}
    
    if panelsize in ("panel4.3", "panel7", "panel10"):
        for child in tree.findall(".//node[@resource-id='com.lxk.Status:id/null']"):
            status_messages.append(replace_all(child.get("content-desc").strip(), rep_dict))

    else: 
        for child in tree.findall(".//text"):
            if child.text:
                status_messages.append(replace_all(child.text.strip(), rep_dict))

    return status_messages

def replace_all(text, dic):
    for i, j in dic.items():
        text = text.replace(i, j)
    return text

def get_banner_message(ip_address, panelsize):

    tree = request_panel_xml(ip_address)
    banner_message = []

    if panelsize in ("panel4.3", "panel7", "panel10"):
        
        for child in tree.findall(".//node[@resource-id='com.lxk.Status:id/title']"):
            banner_message.append(child.get("text").strip())

    else: #for QT PANEL
        
        for child in tree.findall(".//text"):
            banner_message.append(child.text.strip())

    LOGGER.debug(banner_message[0])
    return banner_message[0]

def verify_value_exists(list_var, val):
    """
    :Returns:
        True if the message exists in the list; Otherwise, False
    """

    _list = []
    for item in list_var:
        new_item = item.replace('] ',']').lower()
        _list.append(new_item)
    
    success = False
    msg = "ErrMsg: The provided value was '{val}', but the list is '{_list}'".format(val=val,_list=_list)

    if not val:  #empty value string
        if not _list or _list == ["Remote operator panel activated"]:
            #empty list;ignoring warning for the remote operator panel for video recording;
            success = True
            msg = "The list is blank"
    elif val in _list:
        success = True
        msg = "The provided value exists in the list"

    LOGGER.debug(msg)
    
    return (success, msg)

def get_notification_center_messages(ip_address, panelsize):
    """ Store the status messages on the Status/Supplies screen"""
    tree = request_panel_xml(ip_address)
    notification_center_messages = []

    if panelsize in ("panel4.3", "panel7", "panel10"):
        messages_nodes = tree.findall(".//node[@resource-id='com.lxk.ui:id/notification_list_item_title']")
        messages_nodes.extend(tree.findall(".//node[@resource-id='com.lxk.JobQueue:id/notification_list_item_title']"))

        for child in messages_nodes:
            notification_center_messages.append(child.get("text").strip())
    else: 
        for child in tree.findall(".//text"):
            if child.text:
                notification_center_messages.append(child.text.strip())
    
    return notification_center_messages

def get_graphic_id_code(ip_address):
    """ Get the graphic ID code by looking it up from a dictionary
    """
    graphic_id_code = ""
    cmd = '''call statusapi.Printer getSession "{s}" type "Intervention"'''
    returnoutput = rob.execute(ip_address, cmd)
    LOGGER.debug(returnoutput)

    graphic_id_number = int(getconfigvalue(returnoutput[1], "GRAPHIC_ID : :i"))
    graphic_id_code = list(graphic_id_dict.keys())[list(graphic_id_dict.values()).index(graphic_id_number)]

    LOGGER.debug(graphic_id_number)
    LOGGER.debug("graphic id code {}".format((graphic_id_code)))

    return graphic_id_code

def getconfigvalue(config, key):
    """ Get the value of a configuration key
    Args:
        config(string): this is usually the output of a rob call, string with key,value pairs
        key: the name of the configuration you want the value of
    Return:
        value(string): returns the value of the configuration key supplied
    """
    pattern = "{}[^\\r\\n]+".format(key)
    value = None

    foundkeyvalue = re.search(pattern, config)
    if foundkeyvalue:
        value = foundkeyvalue.group(0).rstrip().rsplit(' ',1)[-1]

    return value


def get_instructions_how_to_clear_ir_and_find_videos(ip_address, panelsize, banner_message, 
                                                     clear_ir_instructions,
                                                     clear_ir_instructions_steps_video_exists,
                                                     clear_ir_instructions_steps_video_progress_bar_exists,
                                                     clear_ir_instructions_steps_counter_text,
                                                     clear_ir_instructions_upper_right_nav_button_text,
                                                     clear_ir_instructions_overflow_actions):
    """ Get instructions how to clear the IR message as well as noting which steps have videos. This applies to the panel only
    """

    ups = UPS_(printer_ip=ip_address)
    ups.initialize()

    if panelsize in ("panel4.3", "panel7", "panel10"):

        #Click More Information or Show me - check UPS
        tree = request_panel_xml(ip_address)
        overflow_button = tree.find(".//node[@resource-id='com.lxk.Status:id/moreinfo_nav_button_overflow']")
        step_counter = tree.find(".//node[@resource-id='com.lxk.Status:id/step_counter']")
        
        #Check overflow actions early, if they exist
        if overflow_button is not None:
            #Click the overflow button
            ups.regex("In area \"com.lxk.Status:id/moreinfo_nav_button_next_done\" do \"press\"")
            
            tree = request_panel_xml(ip_address)
            overflow_actions = tree.findall(".//node[@resource-id='android:id/title']")
            for item in overflow_actions:
                clear_ir_instructions_overflow_actions.append(item.get("text").strip())

            #Dismiss overflow menu
            dismiss()

        if step_counter is None: #step counter does not exist; there is only one step
            LOGGER.debug("step counter is none")

            step_text = tree.findall(".//node[@resource-id='com.lxk.Status:id/steptext']")
            step_text.extend(tree.findall(".//node[@resource-id='com.lxk.Status:id/title']"))
            for child in step_text:
                if child.get("text").strip() != banner_message:
                    clear_ir_instructions.append(child.get("text").strip())

                    clear_ir_instructions,
                    clear_ir_instructions_steps_video_exists,
                    clear_ir_instructions_steps_video_progress_bar_exists,
                    clear_ir_instructions_steps_counter_text,
                    clear_ir_instructions_upper_right_nav_button_text,
                    upper_right_nav_button = get_ir_instructions(tree,step_counter,
                                                                 clear_ir_instructions,
                                                                 clear_ir_instructions_steps_video_exists,
                                                                 clear_ir_instructions_steps_video_progress_bar_exists,
                                                                 clear_ir_instructions_steps_counter_text,
                                                                 clear_ir_instructions_upper_right_nav_button_text)

        else: #step counter exists; scroll through the steps
            number_of_steps = int(step_counter.get("text").strip().split(" ")[-1]) #get the number of steps from the step counter; the step counter will be formatted "Step X of Y"; split the string by spaces and then get the last element from the split
            LOGGER.debug("step counter exists; {}".format(number_of_steps))
            i = 1
            while i <= number_of_steps:
                for child in tree.findall(".//node[@resource-id='com.lxk.Status:id/steptext']"):
                    clear_ir_instructions.append(child.get("text").strip())

                    clear_ir_instructions,
                    clear_ir_instructions_steps_video_exists,
                    clear_ir_instructions_steps_video_progress_bar_exists,
                    clear_ir_instructions_steps_counter_text,
                    clear_ir_instructions_upper_right_nav_button_text,
                    upper_right_nav_button = get_ir_instructions(tree,step_counter,
                                                                 clear_ir_instructions,
                                                                 clear_ir_instructions_steps_video_exists,
                                                                 clear_ir_instructions_steps_video_progress_bar_exists,
                                                                 clear_ir_instructions_steps_counter_text,
                                                                 clear_ir_instructions_upper_right_nav_button_text)

                #Proceed to next page by using the upper right navigation button
                if i < number_of_steps:
                    #Click upper right navigation button
                    ups.regex("In area \"com.lxk.Status:id/moreinfo_nav_button_next_done\" do \"press\"")
                    
                time.sleep(1)
            
                url = "http://{ip_address}/webservices/automation/data/panel.xml".format(ip_address=ip_address)
                response = http_request.get(url)
                output = response['body']

                j = 0
                while j < 10 and (output is None or not output):
                    time.sleep(1)
                    output = response['body']
                    j += 1

                tree = ElementTree.fromstring(output)

                i += 1
            if elem: #Press the back button after pressing the button to view instructions
                dismiss()
    
    else:  #for QT
        tree = request_panel_xml(ip_address)
        show_me_button = tree.xpath("//*[text='Show me']/selected/text()")
        if show_me_button:  #"Show me" exists
            found_button = False
            while not found_button:
                if show_me_button[0] == "true":
                    found_button = True
                    execute_http_request("http://{ip_address}/webservices/automation/request/pressAndReleaseKey?key=KEY_Enter".format(ip_address=ip_address))
                else:
                    execute_http_request("http://{ip_address}/webservices/automation/request/pressAndReleaseKey?key=KEY_Down".format(ip_address=ip_address))
                    

        moreinfo_irview = tree.xpath("//viewname/text()")
        if moreinfo_irview and moreinfo_irview[0] == "MoreInfoIrView":  #continue only if the view is MoreInfoIrView
            elems = tree.xpath("//text/text()")
            gotten_to_first_step = False
            while not gotten_to_first_step:
                execute_http_request("http://{ip_address}/webservices/automation/request/pressAndReleaseKey?key=KEY_Left".format(ip_address=ip_address))
                new_elems = tree.xpath("//text/text()")
                if elems == new_elems:
                    gotten_to_first_step = True
                else:
                    elems = new_elems

            clear_ir_instructions.append("\n".join(elems))

            clear_ir_instructions,
            clear_ir_instructions_steps_video_exists,
            clear_ir_instructions_steps_video_progress_bar_exists,
            clear_ir_instructions_steps_counter_text,
            clear_ir_instructions_upper_right_nav_button_text = append_information_about_clear_ir_instruction(tree,
                                                                                                                clear_ir_instructions,
                                                                                                                clear_ir_instructions_steps_video_exists,
                                                                                                                clear_ir_instructions_steps_video_progress_bar_exists,
                                                                                                                clear_ir_instructions_steps_counter_text,
                                                                                                                clear_ir_instructions_upper_right_nav_button_text)

            gotten_to_last_step = False
            while not gotten_to_last_step:
                execute_http_request("http://{ip_address}/webservices/automation/request/pressAndReleaseKey?key=KEY_Right".format(ip_address=ip_address))
                new_elems = tree.xpath("//text/text()")
                if elems == new_elems:
                    gotten_to_last_step = True
                else:
                    elems = new_elems
                    clear_ir_instructions.append("\n".join(elems))

                    clear_ir_instructions,
                    clear_ir_instructions_steps_video_exists,
                    clear_ir_instructions_steps_video_progress_bar_exists,
                    clear_ir_instructions_steps_counter_text,
                    clear_ir_instructions_upper_right_nav_button_text = append_information_about_clear_ir_instruction(tree,
                                                                                                                      clear_ir_instructions,
                                                                                                                      clear_ir_instructions_steps_video_exists,
                                                                                                                      clear_ir_instructions_steps_video_progress_bar_exists,
                                                                                                                      clear_ir_instructions_steps_counter_text,
                                                                                                                      clear_ir_instructions_upper_right_nav_button_text)

        if show_me_button:  #Go back if "Show me" button had to be pressed
            #delete_panel_event_log() #change this
            execute_http_request("http://{ip_address}/webservices/automation/request/pressAndReleaseKey?key=KEY_Cancel".format(ip_address=ip_address))

def dismiss():
    #delete_panel_event_log() #change this
    url = "http://{ip_address}/webservices/automation/request/pressAndReleaseKey?key=KEYCODE_BACK".format(ip_address=ip_address)
    execute_http_request(url)
    #waitforviewupdate(url) #change this
    
def get_ir_instructions(tree, step_counter,
                        clear_ir_instructions,
                        clear_ir_instructions_steps_video_exists,
                        clear_ir_instructions_steps_video_progress_bar_exists,
                        clear_ir_instructions_steps_counter_text,
                        clear_ir_instructions_upper_right_nav_button_text):

    step_counter = tree.find(".//node[@resource-id='com.lxk.Status:id/step_counter']")
    if step_counter is not None:
        clear_ir_instructions_steps_counter_text[clear_ir_instructions[-1]] = step_counter.get("text").strip()
        LOGGER.debug("step_counter_get_text {}".format(step_counter.get("text").strip()))
    else:
        clear_ir_instructions_steps_counter_text[clear_ir_instructions[-1]] = ""

    LOGGER.debug(clear_ir_instructions_steps_counter_text[clear_ir_instructions[-1]])

    upper_right_nav_button = tree.find(".//node[@resource-id='com.lxk.Status:id/moreinfo_nav_button_next_done']")
    if upper_right_nav_button is not None:
        clear_ir_instructions_upper_right_nav_button_text[clear_ir_instructions[-1]] = upper_right_nav_button.get("text").strip()
    else:
        clear_ir_instructions_upper_right_nav_button_text[clear_ir_instructions[-1]] = ""

    counter = 0
    for child in tree.findall(".//node[@resource-id='com.lxk.Status:id/video']"):
        counter += 1
    if counter != 0:
        clear_ir_instructions_steps_video_exists[clear_ir_instructions[-1]] = True
        counter = 0
        for child in tree.findall(".//node[@resource-id='com.lxk.Status:id/progress']"):
            counter += 1
        if counter != 0:
            clear_ir_instructions_steps_video_progress_bar_exists[clear_ir_instructions[-1]] = True
        else:
            clear_ir_instructions_steps_video_progress_bar_exists[clear_ir_instructions[-1]] = False
    else:
        clear_ir_instructions_steps_video_exists[clear_ir_instructions[-1]] = False
        clear_ir_instructions_steps_video_progress_bar_exists[clear_ir_instructions[-1]] = False

    return clear_ir_instructions, clear_ir_instructions_steps_video_exists,
    clear_ir_instructions_steps_video_progress_bar_exists,
    clear_ir_instructions_steps_counter_text,
    clear_ir_instructions_upper_right_nav_button_text,
    upper_right_nav_button

def execute_http_request(url):
    """ Execute an HTTP request
    Args:
        url - URL for the HTTP request
    Return:
        None
    """
    #handle = urllib.urlopen(url)
    handle = urllib.request.urlopen(url)
    handle.close()

def append_information_about_clear_ir_instruction(tree,
                                                  clear_ir_instructions,
                                                  clear_ir_instructions_steps_video_exists,
                                                  clear_ir_instructions_steps_video_progress_bar_exists,
                                                  clear_ir_instructions_steps_counter_text,
                                                  clear_ir_instructions_upper_right_nav_button_text):

    """ Extract information about More Information from the given XML tree and store
    """
    step_counter = tree.xpath(".//node[@resource-id='com.lxk.Status:id/step_counter']")
    if step_counter:
        clear_ir_instructions_steps_counter_text[clear_ir_instructions[-1]] = step_counter.get("text").strip()
    else:
        clear_ir_instructions_steps_counter_text[clear_ir_instructions[-1]] = ""

    upper_right_nav_button = tree.xpath(".//node[@resource-id='com.lxk.Status:id/moreinfo_nav_button_next_done']")
    if upper_right_nav_button:
        clear_ir_instructions_upper_right_nav_button_text[clear_ir_instructions[-1]] = upper_right_nav_button.get("text").strip()
    else:
        clear_ir_instructions_upper_right_nav_button_text[clear_ir_instructions[-1]] = ""

    counter = 0
    for child in tree.xpath(".//node[@resource-id='com.lxk.Status:id/video']"):
        counter += 1
    if counter != 0:
        clear_ir_instructions_steps_video_exists[clear_ir_instructions[-1]] = True
        counter = 0
        for child in tree.xpath(".//node[@resource-id='com.lxk.Status:id/progress']"):
            counter += 1
        if counter != 0:
            clear_ir_instructions_steps_video_progress_bar_exists[clear_ir_instructions[-1]] = True
        else:
            clear_ir_instructions_steps_video_progress_bar_exists[clear_ir_instructions[-1]] = False
    else:
        clear_ir_instructions_steps_video_exists[clear_ir_instructions[-1]] = False
        clear_ir_instructions_steps_video_progress_bar_exists[clear_ir_instructions[-1]] = False

    return clear_ir_instructions,
    clear_ir_instructions_steps_video_exists,
    clear_ir_instructions_steps_video_progress_bar_exists,
    clear_ir_instructions_steps_counter_text,
    clear_ir_instructions_upper_right_nav_button_text

def verify_clear_ir_instructions_video(_list, _type, val, option):
    """ Check if the provided step does or does not have a video|video progress
    
    Return:
        True if the video for the particular step matches the status stated by the option; Otherwise, False
    """
    success = False
    if option == "does":
        msg = "ErrMsg: The provided value was '{val}', but the '{_type}' for that step does not exist".format(val=val, _type=_type)
        if _list[val]:
            success = True
            msg = "The '{_type}' for '{val}' exists".format(_type=_type, val=val)
    elif option == "does not":
        msg = "ErrMsg: The provided value was '{val}', but the '{_type}' for that step exists".format(val=val, _type=_type)
        if not _list[val]:
            success = True
            msg = "The '{_type}' for '{val}' does not exist".format(_type=_type, val=val)
    else:
        msg = "ErrMsg: The option '{option}' is invalid".format(option=option)

    return (success, msg)

def verify_step_counter_text_and_upper_right_nav_btn(_list,clear_ir_instructions, _type, step_text, step_counter_text):
    """ Check the provided step_counter_text value is the text for a given step that exists in the clear IR instructions list taken from the IR screen in the panel.
    
    Return:
        True if the step_counter_text corresponds to the given step in the clear IR instructions list; Otherwise, False
    """
    success = False
    msg = "ErrMsg: The provided value of '{step_text}' and '{step_counter_text}' may be invalid".format(
           step_text=step_text,
           step_counter_text=step_counter_text)
    if step_text in _list:
        if step_counter_text == _list[step_text]:
            success = True
            msg = "The provided value corresponds to the step in the clear IR instructions list"
        else:
            msg = "ErrMsg: The provided value was '{step_counter_text}', but the actual text is '{actual_step_counter_text}'".format(
                   step_counter_text=step_counter_text,
                   actual_step_counter_text=_list[step_text])
    else:
        msg = "ErrMsg: The step '{step_text}' does not exist in the clear IR instructions list, which is {clear_ir_instructions}".format(
               step_text=step_text,
               clear_ir_instructions=clear_ir_instructions)

    return (success, msg)