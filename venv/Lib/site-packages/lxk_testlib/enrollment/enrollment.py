'''
Created on Nov 23, 2020

@author: Lenver Melgar
'''
import datetime
import json
from pprint import pformat

import requests
from robot.api import logger
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class PrinterManager:
    """
    Handles printer enrollment processes
    """

    def __init__(self, username=None, password=None, pin=None):
        self.username = username
        self.password = password
        self.pin = pin
        self.methods_uri = 'webservices/auth/methods'
        self.auth_uri = 'webservices/auth/session'
        self.enroll_uri = 'esf/prtapp/apps/embeddedagent/enroll'

    def enroll(self, printer_ip, server, username, password, account):
        """
        Enroll the printer and return the result
        """
        enrollment_state = None
        enrollment_manager = EnrollmentManager(username, password, account)

        # Get enrollment code
        enrollment_code = enrollment_manager.get_enrollment_code(server)

        if enrollment_code:
            # Get enroll API endpoint
            endpoint = enrollment_manager.get_api_endpoint(server, 'enroll')

            # Enroll the printer
            enrollment_state = self._send_enrollment(
                printer_ip, endpoint, enrollment_code)
        else:
            logger.error("Failed to get enrollment code")

        return enrollment_state

    def _send_enrollment(self, printer_ip, cloud_endpoint, enrollment_code):
        """
        Send an enrollment request to the printer
        """
        logger.info("Sending enrollment request...")
        enrollment_state = None
        headers = self._create_headers('enroll')

        # Create payload
        body = {}
        body['enrollmentCode'] = enrollment_code
        body['serverUrl'] = cloud_endpoint
        endpoint = self.get_api_endpoint(printer_ip, 'enroll')

        if self.username or self.password or self.pin:
            # Get session data
            session = self._get_session_data(printer_ip)
            body.update(session)
            log_request(endpoint, headers, body, session)

            # Send request
            response = requests.post(
                endpoint, headers=headers, data=json.dumps(body),
                cookies=session, verify=False)
        else:
            # Unsecured printer
            log_request(endpoint, headers, body)
            response = requests.post(
                endpoint, headers=headers, data=json.dumps(body), verify=False)

        log_response(response)

        if response.status_code in (200, 201):
            # Get access token
            enrollment_state = get_response_parameter(
                'enrollmentState', response.json())
        else:
            raise ValueError('Invalid response code: {}'.format(
                response.status_code))

        logger.info("Enrollment state: {}".format(enrollment_state))
        return enrollment_state

    def _get_session_data(self, printer_ip):
        """
        Get printer session ID and key
        """
        logger.info("Getting session data...")
        session = {}
        headers = self._create_headers('auth')

        # Create payload
        body = {}
        body['grant_type'] = 'password'
        if self.username:
            body['username'] = self.username
        if self.password:
            body['password'] = self.password
        if self.pin:
            body['pin'] = self.pin

        # Set login method
        body['method'] = self._get_method_id(printer_ip)
        endpoint = self.get_api_endpoint(printer_ip, 'auth')

        # Send request
        log_request(endpoint, headers, body)
        response = requests.post(
            endpoint, headers=headers, data=body, verify=False)
        log_response(response)

        if  response.status_code in (200, 201):
            session['sessionId'] = get_response_cookie('session_id', response)
            session['sessionKey'] = get_response_cookie('session_key', response)
        else:
            raise ValueError('Invalid response code: {}'.format(
                response.status_code))

        logger.info("Session data: {}".format(session))
        return session

    def get_api_endpoint(self, printer, api):
        """
        Get the endpoint of an API
        """
        if api == 'auth':
            # Authentication endpoint
            endpoint = "https://{}/{}".format(printer, self.auth_uri)
        elif api == 'enroll':
            # Enrollment endpoint
            endpoint = "https://{}/{}".format(printer, self.enroll_uri)
        elif api == 'methods':
            # Methods endpoint
            endpoint = "https://{}/{}".format(printer, self.methods_uri)
        else:
            raise ValueError("Unknown API: '{}'".format(api))

        return endpoint

    def _get_method_id(self, printer):
        """
        Get the login method based on credentials
        """
        logger.info("Getting login method...")

        method_id = None
        endpoint = self.get_api_endpoint(printer, 'methods')

        log_request(endpoint)
        response = requests.get(endpoint, verify=False)
        log_response(response)

        if response.status_code in (200, 201):
            if self.username and self.password:
                method_id = self._get_id(response.json(), "Username Password")
            elif self.pin:
                method_id = self._get_id(response.json(), "PIN")
            elif self.username:
                method_id = self._get_id(response.json(), "Username")
            elif self.password:
                method_id = self._get_id(response.json(), "Password")
            else:
                raise ValueError("Cannot determine login method")

        else:
            raise ValueError('Invalid response code: {}'.format(
                response.status_code))

        return method_id

    def _get_id(self, response, name):
        """
        Get the login method ID
        """
        logger.info("Login method: {}".format(name))
        method_id = None

        method = next((item for item in response if item['name'] == name))
        logger.info("Login method ID: {}".format(method['id']))

        if 'id' in method:
            method_id = method['id']

        return method_id

    @staticmethod
    def _create_headers(api):
        """
        Create request headers
        """
        headers = {}

        if api == 'auth':
            headers['Content-Type'] = 'application/x-www-form-urlencoded'
        elif api == 'enroll':
            headers['Content-Type'] = 'application/json'
        else:
            raise ValueError("Unknown API: '{}'".format(api))

        return headers


class EnrollmentManager:
    """
    Handles printer enrollment cloud processes
    """

    def __init__(self, username, password, account):
        self.username = username
        self.password = password
        self.account = account
        self.expiration = 7
        self.max_usage = 50
        self.auth_uri = 'oauth/token'
        self.enrollment_uri = 'agent-gateway/agents/enrollments'
        self.enroll_uri = 'agent-gateway/agents/enroll/embedded'

    def get_enrollment_code(self, server):
        """
        Get an enrollment code from the cloud
        """
        enrollment_code = None
        access_token = self._get_access_token(server)

        # Create request headers
        logger.info("Getting enrollment code...")
        headers = self._create_headers()
        headers['Authorization'] = 'Bearer {}'.format(access_token)

        # Create payload
        body = {}
        body['accountId'] = self.account
        body['dateExpires'] = self._get_code_expiration()
        body['maximumUses'] = self.max_usage

        # Get endpoint
        endpoint = self.get_api_endpoint(server, 'enrollments')
        log_request(endpoint, headers, body)

        # Send request
        response = requests.post(
            endpoint, headers=headers, data=json.dumps(body), verify=False)
        log_response(response)

        if response.status_code in (200, 201):
            # Get access token
            enrollment_code = get_response_parameter(
                'enrollmentCode', response.json())
        else:
            raise ValueError('Invalid response code: {}'.format(
                response.status_code))

        logger.info("Enrollment code: '{}'".format(enrollment_code))
        return enrollment_code

    def _get_access_token(self, server):
        """
        Get access token from the cloud
        """
        access_token = None
        logger.info("Getting access token...")
        headers = self._create_headers()

        # Create payload
        body = {}
        body['grant_type'] = 'password'
        body['username'] = self.username
        body['password'] = self.password
        endpoint = self.get_api_endpoint(server, 'auth')
        log_request(endpoint, headers, body)

        # Send request
        response = requests.post(
            endpoint, headers=headers, data=json.dumps(body), verify=False)
        log_response(response)

        if response.status_code in (200, 201):
            # Get access token
            access_token = get_response_parameter(
                'access_token', response.json())
        else:
            raise ValueError('Invalid response code: {}'.format(
                response.status_code))

        logger.info("Access token: '{}'".format(access_token))
        return access_token

    def get_api_endpoint(self, domain, api):
        """
        Gets the enpoint of an API
        """
        if api == 'auth':
            # Authentication endpoint
            endpoint = "https://idp.{}/{}".format(domain, self.auth_uri)
        elif api == 'enrollments':
            # Enrollment endpoint
            endpoint = "https://api.{}/{}".format(domain, self.enrollment_uri)
        elif api == 'enroll':
            # Enroll endpoint
            endpoint = "https://api.{}/{}".format(domain, self.enroll_uri)
        else:
            raise ValueError("Unknown API: '{}'".format(api))

        return endpoint

    @staticmethod
    def _create_headers():
        """
        Create request headers
        """
        headers = {}
        headers['Content-Type'] = 'application/json'

        return headers

    def _get_code_expiration(self):
        """
        Calculate enrollment code expiration date
        """
        current_date = datetime.datetime.today()
        expiration = current_date + datetime.timedelta(days=self.expiration)

        return int(expiration.timestamp() * 1000)


def log_request(endpoint=None, headers=None, body=None, session=None):
    """
    Logs the request details
    """
    logger.info("Endpoint: {}\n" \
                "Session: {}\n" \
                "Request Headers: \n{}\n" \
                "Request Body: \n{}".format(
                    endpoint,
                    pformat(session),
                    pformat(headers),
                    pformat(body)))


def log_response(response):
    """
    Logs the server response
    """
    logger.info("Response Code: {}".format(response.status_code))

    if response.headers:
        logger.info("Response Headers: \n{}".format(
            pformat(dict(response.headers))))

    try:
        body = response.json()
        logger.info("Response Body: \n{}".format(pformat(body)))
    except ValueError:
        logger.info("Response Body: None")


def get_response_parameter(name, response):
    """
    Get the parameter value from the response
    """
    value = None

    if name in response:
        value = response[name]
    else:
        logger.error("Parameter '{}' not found".format(name))

    return value


def get_response_cookie(name, response):
    """
    Get the parameter value from the response
    """
    value = None

    if name in response.cookies:
        value = response.cookies[name]
    else:
        logger.error("Cookie '{}' not found".format(name))

    return value
