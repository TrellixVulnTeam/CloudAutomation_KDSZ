"""
NPA  Commands
------------
"""

import os
import logging
from lxk_testlib import rob

ROOT_DIR = os.path.dirname(os.path.realpath(__file__))
FOLDER_PATH = os.path.join(ROOT_DIR, "constants", "_files")
LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def set_value(ip_address, npaid, value):
    """
    Set value of the setting of the printer through NPA.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. npaid, ``<class 'str'>``, Hex NPA Id or npaid string from npaids.enum,
                                     Int NPA Id or setting name from bundles.xml.
        3. value, ``<class 'str'>`` or ``<class 'int'>``

    :Returns: Success ``<class 'bool'>``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(npaid)
    LOGGER.debug(value)

    npa_enum_path = os.path.join(FOLDER_PATH, "npa", "npaids.enum")
    if not os.path.exists(npa_enum_path):
        assert False, "Could not find " + npa_enum_path + "!!!"

    if len(npaid) > 4:
        file = open(npa_enum_path, "r")
        lines = file.readlines()
        ret = []
        for x in lines:
            if npaid in x:
                ret = x.replace(" ","").split('=')
                LOGGER.debug(ret)
                break
        if len(ret) == 2:
            npaid = ret[1].upper().lstrip().rstrip()
    setting = 'ss'
    if value.isdigit():
        if npaid.isdigit():
            setting = 'ii'
        else:
            setting = 'si'

    cmd = """call system.settings setSetting "({""" + setting + """})" setting """\
    + npaid + """ value \"""" + value + """\""""
    LOGGER.debug(cmd)
    return_output = rob.execute(ip_address, cmd)
    LOGGER.debug(return_output)
    if not return_output[0] or "success" not in return_output[1]:
        assert False, "Unable to set NPAID. {}".format(return_output[1])
    else:
        return return_output[0]

def get_value(ip_address, npaid, index_num=None, use_enum_path=True):
    """
    Get settings value of the printer using NPA ID.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. npaid, ``<class 'str'>``, Hex NPA Id or npaid string from npaids.enum.

    :Returns: ``<class 'str'>`` or ``<class 'int'>``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(npaid)
    LOGGER.debug(index_num)

    npa_enum_path = os.path.join(FOLDER_PATH, "npa", "npaids.enum")
    if not os.path.exists(npa_enum_path):
        assert False, "Could not find " + npa_enum_path + "!!!"

    if len(npaid) > 4 and use_enum_path == True:
        file = open(npa_enum_path, "r")
        lines = file.readlines()
        ret = []
        for x in lines:
            if npaid in x:
                ret = x.replace(" ","").split('=')
                LOGGER.debug(ret)
                break
        if len(ret) == 2:
            npaid = ret[1].upper().lstrip().rstrip()

    if index_num:
        index_num = int(index_num) - 1
        if isinstance(npaid, int):
            cmd = """call system.settings getIndexedSetting "(ii)" """ + npaid + " " + str(index_num)
        else:
            cmd = """call system.settings getIndexedSetting "(si)" """ + npaid + " " + str(index_num)
    else:
        if isinstance(npaid, int):
            cmd = """call system.settings getSetting "(i)" """ + npaid
        else:
            cmd = """call system.settings getSetting "(s)" """ + npaid
    LOGGER.debug(cmd)
    returnoutput = rob.execute(ip_address, cmd)
    LOGGER.debug(returnoutput)
    value = ""
    if "status : :i 0" in returnoutput[1]:
        for ret in returnoutput[1].split("\n"):
            if "value : :" in ret.strip():
                LOGGER.debug(ret)
                if ret.strip() == 'value : :':
                    value = ''
                elif 'value : :i' in ret.rstrip():
                    value = ret.rstrip().replace('value : :i ', '')
                elif 'value : :bi' in ret.rstrip():
                    value = ret.rstrip().replace('value : :bi', '')
                elif 'value : :b' in ret.rstrip():
                    value = ret.rstrip().replace('value : :b ', '')
                elif 'value : : bi' in ret.rstrip():
                    value = ret.rstrip().replace('value : : bi ', '')
                elif 'value : :' in ret.rstrip():
                    value = ret.rstrip().replace('value : : ', '')

    LOGGER.debug(value)
    if not returnoutput[0]:
        assert False, "Unable to get NPAID value. {}".format(returnoutput[1])
    else:
        return value.strip()
