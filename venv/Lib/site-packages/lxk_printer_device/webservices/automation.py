"""
Automation
----------
"""

import os
import time
import logging
import urllib.request
import requests
from lxk_printer_device._globals import AUTOMATION_LICENSE

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def download_panel_png(ip_address, filename="panel.png", path="."):
    """
    Download panel.png to path.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. filename, ``<class 'str'>``
        3. path, ``<class 'str'>``

    :Returns: ``None``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(filename)
    LOGGER.debug(path)

    assert isinstance(filename, str), "must be %s" % str
    assert os.path.isdir(path), "%s does not exist" % path
    filepath = os.path.join(path, filename)

    url = "http://{}/webservices/automation/data/panel.png".format(ip_address)
    urllib.request.urlretrieve(url, filepath)

def download_panel_xml(ip_address, filename="panel.xml", path="."):
    """
    Download panel.xml to path.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. filename, ``<class 'str'>``
        3. path, ``<class 'str'>``

    :Returns: ``None``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(filename)
    LOGGER.debug(path)

    assert isinstance(filename, str), "must be %s" % str
    assert os.path.isdir(path), "%s does not exist" % path
    filepath = os.path.join(path, filename)

    url = "http://{}/webservices/automation/data/panel.xml".format(ip_address)
    urllib.request.urlretrieve(url, filepath)

def is_enabled(ip_address):
    """
    Check if UI Automation is enabled.

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``<class 'bool'>``
    """
    LOGGER.debug(ip_address)

    try:
        response = requests.get(
            url="http://{}/webservices/automation/data/panel.xml".format(ip_address),
            timeout=120
        )
        LOGGER.debug(response.status_code)
        status = (response.status_code == 200)
    except Exception as err:
        status = False

    return status

def enable(ip_address, attempts=20):
    """
    This method will enable ui automation to *Moja* printers.
    It will send automation vcc license bundle.
    To know more about the license and unique id being used in this code,
    please check this link below.
    https://twiki.lpdev.prtdev.lexmark.com/bin/view/UI/AutomationAPIv2.

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: Success ``<class 'bool'>``
    """
    LOGGER.debug(ip_address)

    LOGGER.info("Enabling UI automation...")
    ret = False

    if not os.path.exists(AUTOMATION_LICENSE):
        assert False, "Could not find " + AUTOMATION_LICENSE + "!!!"

    response = requests.delete(
        "http://{}/webservices/vcc/licenses".format(ip_address),
        files={
            "id":"00000001-1234-1234-1234-123412340305"
        },
        timeout=300
    )
    LOGGER.debug(response.text)
    time.sleep(5)

    for num in range(attempts):
        with open(AUTOMATION_LICENSE, "rb") as payload:
            response = requests.post(
                url="http://{}/webservices/vcc/bundles".format(ip_address),
                data=payload,
                timeout=120
            )
        LOGGER.debug(response.text)
        if "result: failed" in response.text:
            LOGGER.info("Enabling UI automation attempt <%i> failed...", num)
            time.sleep(2)
        else:
            LOGGER.info("Successfully enabled UI Automation!")
            assert True, "Successfully enabled UI Automation."
            ret = True
            break
    LOGGER.debug(ret)
    return ret
