"""
Printer Device
--------------
"""

import os
import logging
import requests
import lxk_sentry
from lxk_testrunner.printer import other_details
from lxk_printer_device._globals import assert_linux
from lxk_printer_device._globals import FOLDER_PATH
from lxk_printer_device.properties import Properties
from lxk_printer_device.ews import ews
from lxk_printer_device.workflows import network

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def get_firmware_version(ip_address, printer_key="", product_family=""):
    """
    Get Firmware Release Version through EWS (using webglue).

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. printer_key, ``<class 'str'>``
        3. product_family, ``<class 'str'>``

    :Returns: ``<class 'str'>``
    """
    LOGGER.debug(ip_address)
    data = ews.get_content(
        ip_address,
        "/webglue/content?c=%2FDeviceFirmwareLevel",
        attempts=3
    )

    retval = str(data['nodes']['nodes']['DeviceFirmwareLevel']['text']['text'])

    is_sim = other_details.is_sim(ip_address, printer_key)
    if product_family and is_sim:
        retval = product_family + "." + str(data['nodes']['nodes']['DeviceFirmwareLevel']['text']['text'])

    LOGGER.debug(retval)
    return retval

def get_screen_timeout(ip_address):
    """
    Get device Screen Timeout through EWS (using webglue).

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``<class 'int'>``
    """
    LOGGER.debug(ip_address)
    data = ews.get_content(
        ip_address,
        "/webglue/content?c=%2FScreenTimeout",
        attempts=3
    )
    retval = int(data['nodes']['settings'][str(data['nodes']['nodes'] \
    ['ScreenTimeout']['setting'])]['val'])
    LOGGER.debug(retval)
    return retval

def set_page_suppression(ip_address, value):
    """
    .. warning::

        Only supported in Linux.

    Set the printers page suppression to On/Off.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. value, ``<class 'str'>``, [on, off]

    :Returns: ``None``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(value)
    # only supported in Linux
    assert_linux()

    suppression_file = os.path.join(FOLDER_PATH, "pjl", "page_suppress_{}.pjl"\
    .format(value.lower()))
    if not os.path.exists(suppression_file):
        assert False, "Could not find " + suppression_file + "!!!"
    cmd = "sendtcp {} {}".format(ip_address, suppression_file)
    LOGGER.debug(cmd)
    with os.popen(cmd) as console_cmd:
        console_cmd.read()

def reboot(ip_address):
    """
    Reboot the printer and not wait to come back up.

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``None``
    """
    LOGGER.debug(ip_address)
    LOGGER.info("Rebooting device and continue.")
    requests.post(url="http://{}/webglue/reset/doresetprinter".format(ip_address),timeout=120)
    network.wait_for_no_ping(ip_address)
    network.wait_for_ping(ip_address)

