"""
Network
-------
"""

import os
import time
import logging
import platform
from lxk_printer_device.ews import ews

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def get_hostname(ip_address):
    """
    Get device Hostname through EWS (using webglue).

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``<class 'str'>``
    """
    LOGGER.debug(ip_address)
    data = ews.get_content(
        ip_address,
        "/webglue/content?c=SetHostname",
        attempts=3
    )
    retval = data['nodes']['settings'][str(data['nodes']['nodes'] \
    ['SetHostname']['setting'])]['val']
    LOGGER.debug(retval)
    return retval

def get_domain_name(ip_address):
    """
    Get device Domain Name through EWS (using webglue).

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``<class 'str'>``
    """
    LOGGER.debug(ip_address)
    data = ews.get_content(
        ip_address,
        "/webglue/content?c=TcpIpDomainName",
        attempts=3
    )
    retval = data['nodes']['settings'][str(data['nodes']['nodes'] \
    ['TcpIpDomainName']['setting'])]['val']
    LOGGER.debug(retval)
    return retval
 
def wait_for_no_ping(ip_address):
    """
    Ping printer until reply will be timeout.

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: Ping NOK or Printer off the network, ``<class 'bool'>``
    """
    LOGGER.debug(ip_address)
    LOGGER.info("Waiting for printer to disappear from the network...")
    for num in range(0, 250):
        if platform.system() == 'Windows':
            ret = os.system("ping -w 5000 -n 1 {} > nul".format(ip_address))
        else:
            ret = os.system("ping -w 5 -c 1 {} > /dev/null".format(ip_address))
        LOGGER.debug(num)
        LOGGER.debug(ret)

        if ret == 0:
            LOGGER.info("Printer is still reachable...")
            time.sleep(1)
        else:
            limit = 1
            for cnt in range(0, 10):
                #ret = os.system("ping -W 5 -c 1 > /dev/null" + world.url)
                if platform.system() == 'Windows':
                    ret = os.system("ping -w 5 -n 1 {} > nul".format(ip_address))
                else:
                    ret = os.system("ping -w 5 -c 1 {} > /devl/null".format(ip_address))
                LOGGER.debug(cnt)
                LOGGER.debug(limit)
                LOGGER.debug(ret)

                if ret > 0:
                    limit = limit + 1
                    if limit == 2:
                        LOGGER.info("Printer is off the network!")
                        break
            else:
                continue
            break
    else:
        return False
    return True
    
def wait_for_ping(ip_address):
    """
    Wait for printer to be pingable for 20 minutes.
    
    :Parameters:
    
        1. ip_address, ``<class 'str'>``
    
    :Returns: Ping OK ``<class 'bool'>``
    """
    LOGGER.debug(ip_address)
    LOGGER.info("Waiting for printer to appear on the network...")
    for num in range(0, 250):
        if platform.system() == "Windows":
            ret = os.system("ping -w 5000 -n 1 {} > nul".format(ip_address))
        else:
            ret = os.system("ping -W 5 -c 1 {} > /dev/null".format(ip_address))
        LOGGER.debug(num)
        LOGGER.debug(ret)
        if ret == 0:
            LOGGER.info("Printer is on the network!")
            break
        else:
            LOGGER.info("Printer is still unreachable...")
            time.sleep(5)
    else:
        assert False, 'ERROR: Printer({}) never came on the network'.format(ip_address)
    return True

