"""
Initialize functions
"""

import os
import time
import logging
import urllib.request
from subprocess import Popen, PIPE, TimeoutExpired
from lxml import etree
from lxk_printer_device._globals import assert_linux
from lxk_printer_device.ews import ews
from lxk_printer_device._utils import misc

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

UI_TYPES = [
    "Android",
    "QT",
    "2-line"
]

def panel(ip_address):
    """
    Panel initialize function
    """
    LOGGER.debug(ip_address)

    # define panel properties
    res_x = None
    res_y = None
    ui_type = None
    panel_size = None
    is_panel_touch = None

    # define temporary panel.png filename
    temp_panel_png = "panel_{}.png".format(int(time.time()))

    # special method
    def _xml_has_object_tag(ip_address):
        """
        special-private method
        """
        xml = ews.get_content(
            ip_address,
            "/webservices/automation/data/panel.xml",
            attempts=3
        )
        return len(etree.fromstring(xml).xpath(".//object")) != 0

    # Download Panel Image and Get Resolution
    url = "http://%s/webservices/automation/data/panel.png" % ip_address
    urllib.request.urlretrieve(url, temp_panel_png)
    res_x, res_y = misc.get_img_res(temp_panel_png)

    # Delete downloaded image
    os.remove(temp_panel_png)

    # Resolution : panel type relationship
    if res_x == 1024:
        ui_type = UI_TYPES[0]
        panel_size = "panel10"
        is_panel_touch = True

    elif res_x == 800:
        ui_type = UI_TYPES[0]
        panel_size = "panel7"
        is_panel_touch = True

    elif res_x == 480:
        ui_type = UI_TYPES[0]
        panel_size = "panel43"
        is_panel_touch = True

    elif res_x == 320:
        # NOTE: Special case for 2.8
        if _xml_has_object_tag(ip_address):
            ui_type = UI_TYPES[1]
            panel_size = "panel28"
            is_panel_touch = True
        else:
            ui_type = UI_TYPES[1]
            panel_size = "panel24"
            is_panel_touch = False

    elif res_x == 128:
        ui_type = UI_TYPES[2]
        panel_size = "panel2L"
        is_panel_touch = False

    else:
        msg = "\nUnsupported panel size with resX <{}>.\n".format(res_x)
        raise ValueError(msg)

    LOGGER.debug(res_x)
    LOGGER.debug(res_y)
    LOGGER.debug(ui_type)
    LOGGER.debug(panel_size)
    LOGGER.debug(is_panel_touch)
    return (
        res_x,
        res_y,
        ui_type,
        panel_size,
        is_panel_touch
    )

def is_color(ip_address):
    """
    Color initialize function
    """
    LOGGER.debug(ip_address)
    data = ews.get_content(
        ip_address,
        "/webglue/content?c=%2FDeviceType",
        attempts=3
    )
    content = str(data['nodes']['nodes']['DeviceType']['text']['text'])
    LOGGER.debug(content)
    return content == 'Color'

def is_mfp(ip_address):
    """
    MFP initilize function
    """
    LOGGER.debug(ip_address)
    data = ews.get_content(
        ip_address,
        "/webglue/content?c=%2FCopy",
        attempts=3
    )
    length = len(data['nodes']['nodes'])
    LOGGER.debug(length)
    return length != 0

def is_sim(ip_address):
    """
    SIM initialize function
    """
    LOGGER.debug(ip_address)

    # only supported in Linux
    assert_linux()

    cmd = 'ssh {} -l root -oBatchMode=yes "cat /Build.Info | grep Persona"'.\
        format(ip_address)
    proc = Popen(cmd, stdout=PIPE, shell=True)

    try:
        output, _ = proc.communicate(timeout=15)
    except TimeoutExpired:
        proc.kill()
        output, _ = proc.communicate()

    LOGGER.debug(output.decode("utf-8"))
    return "sim" in output.decode("utf-8")
