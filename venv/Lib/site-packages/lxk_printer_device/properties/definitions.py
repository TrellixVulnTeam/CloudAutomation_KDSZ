"""
Printer Properties
------------------
"""

from lxk_printer_device.properties import initialize

PROPERTIES = [
    # add below
    "COLOR",
    "MFP",
    "PANEL_TOUCH",
    "PANEL_SIZE",
    "PANEL_RES_X",
    "PANEL_RES_Y",
    "UI_TYPE",
    # add non-basic properties below
    "SIMULATION"
]

class Properties():
    """
    **Usage**

    .. code-block:: console

        $ python
        ...
        > from lxk_printer_device.properties import Properties
        > properties = Properties(ip_address="10.194.6.115")
        > properties.initialize()
        ...
        > properties.is_color
        True

    """

    def __init__(self, ip_address):
        self._ip = ip_address
        self._dict = {key : None for key in PROPERTIES}

    def initialize(self):
        """
        Initialize Basic Properties:

            1. ``is_color``
            2. ``is_mono``
            3. ``is_mfp``
            4. ``is_sfp``
            5. ``is_panel_touch``
            6. ``is_panel_non_touch``
            7. ``panel_size``
            8. ``panel_resolution``
            9. ``ui_type``

        :Returns: ``None``
        """
        assert isinstance(self._ip, str), "must be %s" % str

        # initialize basic properties
        # non-basic properties will be initialized on use
        res_x, res_y, ui_type, size, is_touch = initialize.panel(self._ip)
        self._dict["PANEL_TOUCH"] = is_touch
        self._dict["PANEL_SIZE"] = size
        self._dict["PANEL_RES_X"] = res_x
        self._dict["PANEL_RES_Y"] = res_y
        self._dict["UI_TYPE"] = ui_type
        self._dict["COLOR"] = initialize.is_color(self._ip)
        self._dict["MFP"] = initialize.is_mfp(self._ip)

    @property
    def is_color(self):
        """
        :Returns: ``<class 'bool'>``
        """
        return self._dict["COLOR"]

    @property
    def is_mono(self):
        """
        :Returns: ``<class 'bool'>``
        """
        return not self._dict["COLOR"]

    @property
    def is_mfp(self):
        """
        :Returns: ``<class 'bool'>``
        """
        return self._dict["MFP"]

    @property
    def is_sfp(self):
        """
        :Returns: ``<class 'bool'>``
        """
        return not self._dict["MFP"]

    @property
    def is_panel_touch(self):
        """
        :Returns: ``<class 'bool'>``
        """
        return self._dict["PANEL_TOUCH"]

    @property
    def is_panel_non_touch(self):
        """
        :Returns: ``<class 'bool'>``
        """
        return not self._dict["PANEL_TOUCH"]

    @property
    def panel_size(self):
        """
        :Returns: ``<class 'str'>``, [panel10, panel7, panel43, panel28, panel24, panel2L]
        """
        return self._dict["PANEL_SIZE"]

    @property
    def panel_resolution(self):
        """
        :Returns: ``<class 'tuple'>``, (x, y)
        """
        return self._dict["PANEL_RES_X"], self._dict["PANEL_RES_Y"]

    @property
    def ui_type(self):
        """
        :Returns: ``<class 'str'>``, [Android, QT, 2-line]
        """
        return self._dict["UI_TYPE"]

    @property
    def is_sim(self):
        """
        .. warning::

            Only supported in Linux.

        :Returns: ``<class 'bool'>``
        """

        if self._dict["SIMULATION"] is None:
            self._dict["SIMULATION"] = initialize.is_sim(self._ip)
        return self._dict["SIMULATION"]
