"""
EWS
---
"""

import time
import json
import socket
import logging
from http import client

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def get_content(ip_address,\
                    url,\
                    attempts,\
                    headers=None,\
                    use_default_headers=True,\
                    body=""\
                    ):
    """
    Get EWS content using HTTP GET method.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. url, ``<class 'str'>``
        3. attempts, ``<class 'int'>``
        4. headers, ``<class 'dict'>``
        5. use_default_headers, ``<class 'bool'>``
        6. body, ``<class 'str'>``

    :Returns: ``<class 'dict'>`` or ``<class 'str'>``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(url)
    LOGGER.debug(attempts)
    LOGGER.debug(headers)
    LOGGER.debug(use_default_headers)
    LOGGER.debug(body)

    cnt = 0
    resp = None
    conn = None
    success = False

    if use_default_headers:
        headers = {
            'Accept': 'application/json, text/javascript',
            "Content-type": "application/x-www-form-urlencoded;",
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 \
            (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36",
        }

    while cnt < attempts and success is False:
        try:
            conn = client.HTTPConnection(ip_address + ':80')
            conn.request("GET", url, body, headers)
            resp = conn.getresponse()
            success = True
        except socket.error:
            if cnt >= attempts:
                success = False
            else:
                pass
            time.sleep(3)
        cnt += 1
        LOGGER.debug(cnt)

    if success is False:
        msg = "\nUnable to get response from {}".format(url)
        raise ValueError(msg)
    else:
        if resp.status != 200:
            msg = "\nReturn status from {} is not 200".format(url)
            raise ValueError(msg)
        else:
            response_data = resp.read()
            try:
                data = json.loads(response_data.decode("utf-8"))
            except ValueError:
                data = response_data
            conn.close()
            LOGGER.debug(data)
            return data
