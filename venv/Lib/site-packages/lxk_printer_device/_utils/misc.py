"""
TODO
"""

import re
import struct
from imghdr import what as image_type

def get_result(config, key):
    """ Get the value of a configuration key
    Args:
        config(string): this is usually the output of a rob call, string with key,value pairs
        key: the name of the configuration you want the value of
    Return:
        value(string): returns the value of the configuration key supplied
    """
    pattern = "{}[^\\r\\n]+".format(key)
    value = None

    result = re.search(pattern, config)
    if result:
        value = result.group(0).rstrip().rsplit(' ', 1)[-1]

    return value

def get_img_res(img_filename):
    """
    TODO
    """
    # Source: https://stackoverflow.com

    # Private Constants
    img_head = 24
    png_signature = 0x0d0a1a0a
    size = 2
    ftype = 0

    # ValueError will be raised after open's __exit__ method
    with open(img_filename, 'rb') as image:
        head = image.read(img_head)

        if len(head) != img_head:
            msg = "\nDeviceInfoError: Invalid image head length <{}>".format(len(head))
            raise ValueError(msg)

        # GIF
        if image_type(img_filename) == 'gif':
            width, height = struct.unpack('<HH', head[6:10])
        # PNG
        elif image_type(img_filename) == 'png':
            signature = struct.unpack('>i', head[4:8])[0]
            if signature != png_signature:
                msg = "\nDeviceInfoError: Invalid PNG signature <{}>".format(signature)
                raise ValueError(msg)
            width, height = struct.unpack('>ii', head[16:24])
        # JPEG
        elif image_type(img_filename) == 'jpeg':
            try:
                image.seek(0) # Read 0xff next
                while not 0xc0 <= ftype <= 0xcf:
                    image.seek(size, 1)
                    byte = image.read(1)
                    while ord(byte) == 0xff:
                        byte = image.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('>H', image.read(2))[0] - 2
                # SOFn block
                image.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('>HH', image.read(4))
            except:
                msg = "\nDeviceInfoError: Error processing JPEG image file"
                raise ValueError(msg)
        else:
            msg = "\nDeviceInfoError: Unsupported image type \
            <{}>".format(image_type(img_filename))
            raise ValueError(msg)
        return width, height
