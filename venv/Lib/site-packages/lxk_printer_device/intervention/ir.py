"""
IRs
---
"""

import os
import logging
from lxk_printer_device.ews import ews
from lxk_printer_device._globals import assert_linux
from lxk_printer_device._utils import misc

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def get_message(ip_address, ir_exceptions=[], attempt=3):
    """
    Get the IR title/message of the printer

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. ir_exceptions, ``<class 'list'>``, list of titles/messages
        3. attempt, ``<class 'int'>``

    :Returns: ``<class 'list'>``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(ir_exceptions)
    LOGGER.debug(attempt)

    num_exceptions = len(ir_exceptions)
    if num_exceptions > 0:
        ir_exceptions = [title.strip().lower() for title in ir_exceptions]
    data = ews.get_content(ip_address, "/webglue/isw/status", attempt)
    irs = [stat["IrTitle"] for stat in data if\
           str(stat["type"]).lower() == "ir" and stat["IrTitle"].strip().lower() not in\
           ir_exceptions]
    LOGGER.debug(irs)
    return irs

def is_intervention_required(ip_address, ir_exceptions=[], attempt=3):
    """
    Checks if printer IR exist.

    :Parameters:

        1. ip_address, ``<class 'str'>``
        2. ir_exceptions, ``<class 'list'>``, list of titles/messages
        3. attempt, ``<class 'int'>``

    :Returns: ``<class 'list'>``
    """
    LOGGER.debug(ip_address)
    LOGGER.debug(ir_exceptions)
    LOGGER.debug(attempt)

    ir_exists = False
    irs = get_message(
        ip_address,
        ir_exceptions=ir_exceptions,
        attempt=attempt
    )
    length = len(irs)
    if  length > 0:
        ir_exists = True
        print(irs)
    LOGGER.debug(ir_exists)
    return ir_exists

def clear_sim_engine_irs(ip_address):
    """
    .. warning::

        Only supported in Linux.

    Clear IR from the panel. This will mostly work on sim.

    :Parameters:

        1. ip_address, ``<class 'str'>``

    :Returns: ``None``
    """
    LOGGER.debug(ip_address)

    # only supported in Linux
    assert_linux()

    cmd = '''ssh -o StrictHostKeyChecking=no -l root ''' + ip_address + ''' rob --bus '''\
    + ip_address +''' call statusapi.Printer getSession "{s}" type "Intervention"'''
    returnoutput = os.popen(cmd).read()
    LOGGER.debug(returnoutput)
    ir_id = str(misc.get_result(returnoutput, " ID : :i"))
    action_id = str(misc.get_result(returnoutput, "ACTIONS : :i"))
    clear_cmd = '''ssh -o StrictHostKeyChecking=no -l root ''' + ip_address + ''' rob --bus '''\
    + ip_address +''' call statusapi.Printer performAction "{ii}" ACTIONS ''' + action_id +\
    ''' ID ''' + ir_id
    LOGGER.debug(clear_cmd)
    os.popen(clear_cmd).read()
