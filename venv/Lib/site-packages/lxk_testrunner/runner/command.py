""" Testrunner Command Execution
"""

import logging
from lxk_testrunner import robot_
from lxk_testrunner import ART
from lxk_testrunner.runner import version
from lxk_testrunner.utils import git

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def execute(args, extras):
    """
    Commands:
    1. robot
    2. clone
    3. update
    """
    success = True

    ###########################################################################
    # COMMAND: None
    # -invalid
    ###########################################################################
    if args.command is None:
        LOGGER.error(
            "ERROR: "
            "Command required. "
            "See, testrunner --help ."
        )
        success = False

    ###########################################################################
    # COMMAND: robot | pybot
    # - execute robotframework
    ###########################################################################
    elif args.command == "robot" or args.command == "pybot":
        # welcome message
        LOGGER.info(ART)
        _ = robot_.main(args, extras)

    ###########################################################################
    # COMMAND: clone
    # - git clone repository from Gerrit
    ###########################################################################
    elif args.command == "clone":
        # check if git is in PATH; is executable or installed
        if git.check_path():
            for project in args.projects:
                clone_success = git.clone(
                    project_name=project,
                    protocol=args.protocol,
                    dst=args.workspace
                )
                if not clone_success:
                    LOGGER.error(
                        "ERROR: "
                        "Cloning %s failed.",
                        project
                    )
                    success &= False

        else:
            LOGGER.error(
                "ERROR: "
                "git not in PATH. "
                "Manually add it to PATH and try again."
            )
            success = False

    ###########################################################################
    # COMMAND: update
    # - re-install lxk_testrunner
    # NOTE: always update requirements first before updating lxk_testrunner
    ###########################################################################
    elif args.command == "update":
        LOGGER.info(
            "Updating %s dependencies...",
            "global (root required)" if args.install_globally else "user base"
        )
        # update requirements
        success &= robot_.update(args.install_globally)
        # update lxk_testrunner
        success &= version.update(args.install_globally)

    ###########################################################################
    # COMMAND: etc
    # - invalid
    ###########################################################################
    else:
        LOGGER.error(
            "ERROR: "
            "Command %s invalid. "
            "See, testrunner --help .",
            args.command
        )
        success = False

    return success
