""" Testrunner arguments
"""

import os
import argparse
from lxk_testrunner import TEST_PROJECTS

def command_robot(subparsers):
    """
    COMMAND: robot
    """
    robot = subparsers.add_parser(
        "robot",
        aliases=["pybot"],
        help=(
            "Executes robotframework commands (i.e. execute robot test "
            "scripts). See robot --help."
        )
    )
    robot.add_argument(
        "printer_ip",
        action="store",
        metavar="IPv4",
        help=(
            "Add ${PRINTER_IP} variable to test execution. "
            "Extension of robotframework. "
        )
    )
    robot.add_argument(
        "--testplan",
        action="store",
        help=(
            "Specify the full Testplan name, "
            "where Testcases are queried from. "
        )
    )
    robot.add_argument(
        "--testproject",
        action="store",
        default="test-scripts",
        metavar="TESTPROJECT",
        choices=[name for _, name in TEST_PROJECTS.items()],
        help=(
            "Specify the Test Project to execute. "
            "Defaults to \"test-scripts\". "
        )
    )
    robot.add_argument(
        "--execution",
        action="store",
        default="Automated",
        help=(
            "Specify the Testcases' execution type. "
            "Defaults to \"Automated\". "
        )
    )

def command_clone(subparsers):
    """
    COMMAND: clone
    """
    clone = subparsers.add_parser(
        "clone",
        help=(
            "Git clone a Gerrit repository into workspace. "
            "Currently, only Linux platform are supported. "
        )
    )
    clone.add_argument(
        "protocol",
        action="store",
        choices=["ssh", "http"],
        help=(
            "Select a connection protocol to use with clone. "
        )
    )
    clone.add_argument(
        "projects",
        action="store",
        metavar="TESTPROJECT",
        nargs="*",
        choices=[name for _, name in TEST_PROJECTS.items()],
        help=(
            "Select a repository to clone. "
        )
    )

def command_update(subparsers):
    """
    COMMAND: update
    """
    update = subparsers.add_parser(
        "update",
        help=(
            "Upgrade testrunner and all depedencies."
        )
    )
    update.add_argument(
        "--user",
        action="store_false",
        dest="install_globally",
        default=True,
        help=(
            "Use this option if lxk_testrunner was installed with ``--user`` "
            "option. "
        )
    )

def parse():
    """
    Read ``help`` keyword for more details on the arguments.
    """
    parser = argparse.ArgumentParser(
        add_help=False
    )

    ###########################################################################
    # SETTINGS OPTIONS
    ###########################################################################
    settings = parser.add_argument_group(
        title="Settings",
        description=(
            "Use these options to configure testrunner settings."
        )
    )

    settings.add_argument(
        "--workspace",
        action="store",
        dest="workspace",
        default=os.getcwd(),
        metavar="DIRECTORY",
        help=(
            "Sets a different workspace than the present working directory. "
            "Workspace contains test scripts and resources."
        )
    )

    settings.add_argument(
        "-d",
        "--logdir",
        "--outputdir",
        action="store",
        dest="logdir",
        default=os.getcwd(),
        metavar="DIRECTORY",
        help=(
            "Sets a different directory for output logs "
            "than the present working directory. "
        )
    )

    settings.add_argument(
        "--skip-updates",
        action="store_false",
        dest="do_version_check",
        default=True,
        help=(
            "Use this option to disable checking for package updates "
            "after command execution."
        )
    )

    ###########################################################################
    # TESTRUNNER COMMANDS (SUBPARSERS)
    # - perform utility routines (i.e. update, clone)
    # - test framework extension command (i.e. execute test)
    ###########################################################################
    subparsers = parser.add_subparsers(
        title="Commands",
        dest="command",
        description=(
            "Execute testrunner command."
        )
    )
    command_robot(subparsers)
    command_clone(subparsers)
    command_update(subparsers)

    ###########################################################################
    # HELP OPTIONS
    ###########################################################################
    help_ = parser.add_argument_group(
        title="Help",
        description=(
            "%(prog)s --help | "
            "%(prog)s {command} --help "
        )
    )
    help_.add_argument(
        "-h",
        "--help",
        action="help",
        help=argparse.SUPPRESS
    )

    return parser.parse_known_args()
