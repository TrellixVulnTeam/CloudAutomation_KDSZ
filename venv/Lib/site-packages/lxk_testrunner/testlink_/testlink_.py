"""
TestLink Helper Application Module
"""

import os
import logging
from testlink import TestlinkAPIClient, TestLinkHelper
from testlink.testlinkerrors import TLResponseError
from lxk_testrunner import TESTLINK_API_URL, TESTLINK_API_DEVKEY

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

TESTLINK_TP_CUSTOM_FIELDS = [
    "Pass",
    "Panel Type"
]

TESTLINK_TC_EXECUTION_TYPES = {
    "Manual":1,
    "Automated":2,
    "Automated Local":3
}

class TestLink():
    """
    TestLink Helper Class
    """

    def __init__(self, api_url=TESTLINK_API_URL, devkey=TESTLINK_API_DEVKEY):
        self.tls = None
        self.api_url = api_url
        self.devkey = devkey

    def connect(self):
        """
        Instantiate and initialize TestLinkHelper object.
        """
        os.environ['TESTLINK_API_PYTHON_SERVER_URL'] = self.api_url
        os.environ['TESTLINK_API_PYTHON_DEVKEY'] = self.devkey
        self.tls = TestLinkHelper().connect(TestlinkAPIClient)

    def get_testproject_name(self, project_code):
        """
        Convert Project code to full project name.
        self.tls.getProjects() returns all fields of all projects.
        """
        LOGGER.debug(project_code)
        assert isinstance(project_code, str), "must be {type_}".\
            format(type_=str)

        all_projects = self.tls.getProjects()
        project = next(
            (proj for proj in all_projects if proj['prefix'] == project_code),
            None
        )
        LOGGER.debug(project)
        return project['name'] if project is not None else None

    def get_testplan(self, project_name, testplan_name):
        """
        Get testplan fields and values.

        self.tls.getTestPlanByName() returns:
        [{
            'name': 'TestplanChernani_A',
            'is_public': '1',
            'id': '1129315',
            'is_open': '1',
            'active': '1',
            'testproject_id': '1030732',
            'notes': '',
            'api_key': '5edac9bb1c61e~'
        }]

        self.tls.getTestPlanCustomFieldDesignValue() returns:
        {
            'valid_regexp': '',
            'node_id': '1129315',
            'show_on_execution': '1',
            'location': '1',
            'enable_on_execution': '0',
            'type': '5',
            'name': 'Pass',
            'length_min': '0',
            'value': 'Family Pass',
            'show_on_design': '1',
            'possible_values': 'Family Pass',
            'show_on_testplan_design': '0',
            'label': 'Pass',
            'required': '0',
            'length_max': '0',
            'default_value': '',
            'enable_on_design': '1',
            'id': '19',
            'display_order': '1',
            'enable_on_testplan_design': '0'
        }
        """
        LOGGER.debug(project_name)
        LOGGER.debug(testplan_name)
        assert isinstance(project_name, str), "must be {type_}".\
            format(type_=str)
        assert isinstance(testplan_name, str), "must be {type_}".\
            format(type_=str)

        # define return dict
        retval = {
            # default fields
            "id":None,
            "name":None,
            "active":None,
            "is_public":None,
            "testproject_id":None,
        }
        try:
            # self.tls.getTestPlanByName() returns default fields only
            testplan = self.tls.getTestPlanByName(project_name, testplan_name)
            LOGGER.debug(testplan)
        except TLResponseError:
            return None

        # append default fields
        for field in retval:
            retval[field] = testplan[0][field]

        # append custom fields
        for customfield in TESTLINK_TP_CUSTOM_FIELDS:
            # manually query Test Plan custom fields
            retval[customfield] = self.tls.getTestPlanCustomFieldDesignValue(
                customfield,
                retval["testproject_id"],
                retval["id"]
            )["value"]
        LOGGER.debug(retval)
        return retval

    def get_testplan_testcases(self, testplan_id, execution_type):
        """
        Get all automated or automated local testcases.

        self.tls.getTestCasesForTestPlan() returns:
        {
            '1129318': [{
                'feature_id': '2743052',
                'exec_on_build': '',
                'status': '7',
                'exec_id': '0',
                'tcversion_number': '',
                'platform_name': '',
                'exec_on_tplan': '',
                'version': '1',
                'tcase_name': 'Boom',
                'full_external_id': 'TOOLS-3196',
                'tc_id': '1129318',
                'execution_duration': '',
                'exec_status': 'n',
                'execution_type': '2',
                'platform_id': '0',
                'tcversion_id': '1129319',
                'tcase_id': '1129318',
                'execution_order': '1',
                'external_id': '3196'
            }],

            '1129316': [{
                ...
            }],

            '1129320': [{
                ...
            }]
        }
        """
        LOGGER.debug(testplan_id)
        LOGGER.debug(execution_type)
        assert isinstance(testplan_id, str), "must be {type_}".\
            format(type_=str)
        assert isinstance(execution_type, str), "must be {type_}".\
            format(type_=str)

        # important keys only
        tc_template = {
            "tcase_name":None,
            "full_external_id":None,
        }
        # define return dict;
        retval = {}

        try:
            exec_type = TESTLINK_TC_EXECUTION_TYPES[execution_type]
        except KeyError:
            assert False, "%s unsupported" % execution_type

        testcases = self.tls.getTestCasesForTestPlan(
            testplan_id,
            executiontype=exec_type
        )
        LOGGER.debug(testcases)
        for testcase in testcases:
            retval[testcase] = [{}]
            for template in tc_template:
                retval[testcase][0][template] = testcases[testcase][0][template]

        LOGGER.debug(retval)
        return retval
