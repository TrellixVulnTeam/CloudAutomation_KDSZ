""" Robot Project Utility Functions
"""

import os
import logging
from lxk_testrunner.utils import system
from lxk_testrunner.runner import workspace
from lxk_testrunner import EXT_PROJ_DIRMAP

SEP = ":"
LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def read_config_value(section, key, project_path):
    """
    Read project cfg (testrunner.cfg) and return a key's value.
    """
    LOGGER.debug(key)
    LOGGER.debug(project_path)
    assert isinstance(key, str), "must be {type_}".format(type_=str)
    assert os.path.isdir(project_path), "{path} does not exist!".\
        format(path=project_path)
    value = workspace.read_project_cfg(section, key, project_path)
    LOGGER.debug(value)
    return value

def get_paths(name, path):
    """
    Return a string joined from a list, separated by SEP (":"), containing
    robot library, resource and listener paths.
    """
    LOGGER.debug(name)
    LOGGER.debug(path)
    assert isinstance(name, str), "must be {type_}".format(type_=str)
    assert os.path.isdir(path), "{path} does not exist!".format(path=path)

    paths = ""
    project_path = os.path.join(path, name)
    ###########################################################################
    # ADD THE TEST PROJECT ITSELF
    ###########################################################################
    paths += project_path + SEP
    ###########################################################################
    # LIBRARIES
    ###########################################################################
    library = os.path.join(
        project_path,
        read_config_value(EXT_PROJ_DIRMAP, "library", project_path)
    )
    if os.path.isdir(library):
        paths += library + SEP

    ###########################################################################
    # RESOURCES
    ###########################################################################
    resource = os.path.join(
        project_path,
        read_config_value(EXT_PROJ_DIRMAP, "resource", project_path)
    )
    if os.path.isdir(resource):
        paths += resource + SEP

    ###########################################################################
    # LISTENERS
    # - add both essential and optional listeners
    ###########################################################################
    listener = os.path.join(
        project_path,
        read_config_value(EXT_PROJ_DIRMAP, "listener", project_path)
    )

    # essential listeners
    essential = os.path.join(listener, "essential")
    if os.path.isdir(essential):
        paths += essential + SEP

    # optional listeners
    optional = os.path.join(listener, "optional")
    if os.path.isdir(optional):
        paths += optional + SEP

    ###########################################################################
    # VARIABLES
    # - add both essential and optional variables
    ###########################################################################
    variables = os.path.join(
        project_path,
        read_config_value(EXT_PROJ_DIRMAP, "variables", project_path)
    )

    # essential variables
    essential = os.path.join(variables, "essential")
    if os.path.isdir(essential):
        paths += essential + SEP

    # optional variables
    optional = os.path.join(variables, "optional")
    if os.path.isdir(optional):
        paths += optional + SEP

    LOGGER.debug(paths)
    return paths

def get_essential_listeners(name, path):
    """
    Return a list of listener names.

    Robot Usage:
    --listener MyListener
    """
    LOGGER.debug(name)
    LOGGER.debug(path)
    assert isinstance(name, str), "must be {type_}".format(type_=str)
    assert os.path.isdir(path), "{path} does not exist!".format(path=path)

    project_path = os.path.join(path, name)
    listener = read_config_value(EXT_PROJ_DIRMAP, "listener", project_path)
    ess_listener = os.path.join(project_path, listener, "essential")

    listeners = []
    if os.path.isdir(ess_listener):
        _, _, files = next(system.walk(
            directory=ess_listener,
            depth=0
        ))
        for file_ in files:
            # use only filename without its extension
            filename, _ = os.path.splitext(file_)
            listeners.append(filename)

    LOGGER.debug(listeners)
    return listeners

def get_essential_variables(name, path):
    """
    Return a list of essential variable files.

    Robot Usage:
    --variablefile myvariables.py
    """
    LOGGER.debug(name)
    LOGGER.debug(path)
    assert isinstance(name, str), "must be {type_}".format(type_=str)
    assert os.path.isdir(path), "{path} does not exist!".format(path=path)

    project_path = os.path.join(path, name)
    variables = read_config_value(EXT_PROJ_DIRMAP, "variables", project_path)
    ess_variables = os.path.join(project_path, variables, "essential")

    essentials = []
    if os.path.isdir(ess_variables):
        _, _, files = next(system.walk(
            directory=ess_variables,
            depth=0
        ))
        for file_ in files:
            # keep its file extension
            essentials.append(file_)

    LOGGER.debug(essentials)
    return essentials

def get_scripts_path(name, path):
    """
    Return a Test Project's scripts path.
    /path/to/workspace/test-project/scripts
    """
    LOGGER.debug(name)
    LOGGER.debug(path)
    assert isinstance(name, str), "must be {type_}".format(type_=str)
    assert os.path.isdir(path), "{path} does not exist!".format(path=path)

    project_path = os.path.join(path, name)
    scripts = read_config_value(EXT_PROJ_DIRMAP, "scripts", project_path)
    scripts_path = os.path.join(project_path, scripts)

    LOGGER.debug(scripts_path)
    return scripts_path
