"""
Customy Package Dependency Version Checker
"""

import os
import re
import logging
from lxk_testrunner import INTERNAL_INDEX, PUBLIC_INDEX, REQUIREMENTS_TXT
from lxk_testrunner.utils import pip

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def check_dependency(requirements=REQUIREMENTS_TXT):
    """
    Return bool if packages in requirements are outdated.
    """
    LOGGER.debug(requirements)
    assert os.path.isfile(requirements), "{file_} does not exist".\
        format(file_=requirements)

    outdated_packages = []

    with open(requirements, "r") as fhandle:
        for line in fhandle:
            # skip external index dependencies; only check internal index
            # dependencies
            if not line.startswith("lxk_"):
                continue

            LOGGER.debug(line)
            pattern = r"((?:[\w]+-?)+)(?:<|<=|!=|==|>=|>|~=|===)?.*"
            package = re.search(pattern, line.rstrip())
            if package is not None:
                package = package.group(1)

                # check installed package
                installed_version = pip.check_installed_package_version(
                    name=package
                )
                LOGGER.debug(installed_version)

                # check package in both PyPi Org and PyPi Internal
                latest_version = None
                for index in [INTERNAL_INDEX, PUBLIC_INDEX]:
                    latest_version = pip.check_latest_package_version(
                        name=package,
                        index=index
                    )
                    if latest_version is not None:
                        break
                else:
                    LOGGER.critical(
                        "CRITICAL: "
                        "Please contact Tools & Automation Team. "
                        "Python pip search did not find %s "
                        "in both %s and %s.",
                        package, INTERNAL_INDEX, PUBLIC_INDEX
                    )

                if installed_version != latest_version:
                    outdated_packages.append((
                        package,
                        installed_version,
                        latest_version
                    ))
            else:
                LOGGER.critical(
                    "CRITICAL: "
                    "Please contact Tools & Automation Team. "
                    "Empty regex search with <%s> on <%s> from file %s.",
                    pattern, line.rstrip(), requirements
                )

    LOGGER.debug(outdated_packages)
    if outdated_packages:
        for package in outdated_packages:
            LOGGER.warning(
                "WARNING: "
                "Your version of %s is %s (latest version is %s).",
                package[0], package[1], package[2]
            )

    return bool(outdated_packages)

def update(install_globally):
    """
    Update packages in requirements.txt
    """
    options = ["--upgrade-strategy=only-if-needed"]

    if not install_globally:
        options.append("--user")

    success = pip.upgrade(
        extra_index=INTERNAL_INDEX,
        requirements=REQUIREMENTS_TXT,
        options=options
    )
    return success
