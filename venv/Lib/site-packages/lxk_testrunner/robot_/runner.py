""" Programmatic entry point for running Robot testlink using run_cli.
"""

import os
import logging
from robot import run_cli
from lxk_testrunner import TEST_PROJECTS
from lxk_testrunner.runner import workspace
from lxk_testrunner.robot_ import project, testplan

SEP = ":"
LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def main(args, extras):
    """ Main Robot runner
    """
    LOGGER.debug(args)
    LOGGER.debug(extras)
    assert isinstance(extras, list), "must be {type_}".format(type_=list)

    # command and other containers
    cmd = []
    testlink = []
    listeners = []
    variables = []
    pythonpath = []

    # check if shared resources exist in workspace
    robot_common_kw_dst = os.path.join(args.workspace, TEST_PROJECTS["common"])
    if not os.path.isdir(robot_common_kw_dst):
        LOGGER.error(
            "ERROR: "
            "Make sure %s.git project exist under %s. "
            "Manually clone it or run `testrunner clone`.",
            TEST_PROJECTS["common"], args.workspace
        )
        return 1

    # TestLink integration
    testcases = testplan.get_testcases(
        testplan_name=args.testplan,
        testproject=args.testproject,
        execution_type=args.execution,
        workspace=args.workspace
    )
    for testcase in testcases:
        testlink.append("--test=%s" % testcase)

    # get projects in workspace
    projects = workspace.get_projects(args.workspace)

    # indentify project listener and variable paths
    for name in projects:
        # used with --listener option
        for listener in project.get_essential_listeners(name, args.workspace):
            listeners += ["--listener", listener]

        # used with --variablefile option
        for variable in project.get_essential_variables(name, args.workspace):
            variables += ["--variablefile", variable]

        # used with --pythonpath option
        pythonpath += [
            "--pythonpath",
            # remove trailing separator char with [:-1]
            project.get_paths(name, args.workspace)[:-1]
        ]

    # default Robot args
    cmd += listeners
    cmd += variables
    cmd += pythonpath
    cmd += ["--outputdir", args.logdir]
    # extended and optional robot args
    if args.printer_ip is not None:
        # create PRINTER_IP environment variable
        os.environ['PRINTER_IP'] = args.printer_ip
        cmd += ["--variable", "PRINTER_IP:{ip}".format(ip=args.printer_ip)]

    # extra args are all args not specified in both TestRunner and extended
    # robot args
    cmd += extras

    LOGGER.debug(testlink)
    if testlink:
        # change robot console logger verbose level to --dotted
        cmd += ["--dotted"]
        # append list of testcases with --test option
        cmd += testlink
        # append /path/to/workspace/test-project/scripts as suite
        cmd += [project.get_scripts_path(args.testproject, args.workspace)]

    LOGGER.debug(cmd)
    return_code = run_cli(cmd, exit=False)
    LOGGER.debug(return_code)
    return return_code
