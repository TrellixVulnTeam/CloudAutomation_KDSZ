""" TestRunner Main
"""

import os
import logging
from lxk_testrunner import robot_
from lxk_testrunner import INTERNAL_INDEX
from lxk_testrunner.runner import arguments, command, version
from lxk_testrunner.utils import logger, ping

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def main():
    """
    Main routine:
    1. Pre-setup (workspace and logdir)
    2. Execute command
    2. Post-action (check for updates)
    """
    args, extras = arguments.parse()

    ###########################################################################
    # PRE-SETUP
    ###########################################################################
    if not os.path.isdir(args.workspace):
        LOGGER.error(
            "ERROR: "
            "Workspace %s does not exist. "
            "Set it through --workspace option.",
            args.workspace
        )
        return 1

    if not os.path.isdir(args.logdir):
        LOGGER.error(
            "ERROR: "
            "Logs directory %s does not exist. "
            "Set it through -d/--logdir/--outputdir option.",
            args.logdir
        )
        return 1

    # create logs directory under logdir
    args.logdir = os.path.join(args.logdir, "logs")
    if not os.path.isdir(args.logdir):
        os.makedirs(args.logdir)

    # create logger
    logger.create(
        name="lxk_testrunner",
        filename="testrunner.log",
        path=args.logdir
    )
    LOGGER.debug(args)
    LOGGER.debug(extras)

    ###########################################################################
    # EXECUTE COMMAND
    ###########################################################################
    success = command.execute(args, extras)
    if not success:
        return 1

    ###########################################################################
    # POST-ACTION
    ###########################################################################
    if args.do_version_check:
        reachable = ping.get_response(server=INTERNAL_INDEX)
        if not reachable:
            LOGGER.critical(
                "CRITICAL: "
                "Please contact Tools & Automation Team. "
                "%s is not currently reachable.",
                INTERNAL_INDEX
            )
            return 1

        LOGGER.info("...")
        outdated = False
        outdated |= version.check_outdated()
        outdated |= robot_.check_dependency()

        if outdated:
            LOGGER.warning(
                "WARNING: Please update. Run, "
                "testrunner update [--user]"
            )

    return 0

if __name__ == "__main__":
    main()
