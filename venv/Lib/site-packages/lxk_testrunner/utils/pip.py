""" Python PIP functions
"""

import os
import re
import sys
import logging
import subprocess
from lxk_testrunner.utils import system

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)

def check_latest_package_version(name, index):
    """
    Use python executable that interpreted lxk_testrunner package
    through sys.executable

    Commands,
    $ python -m pip search name
    """
    LOGGER.debug(name)
    LOGGER.debug(index)
    assert isinstance(name, str), "must be {type_}".format(type_=str)
    assert isinstance(index, str), "must be {type_}".format(type_=str)

    version = None
    cmd = [
        sys.executable,
        "-m",
        "pip",
        "search",
        "--index={ix}".format(ix=index),
        name,
        "--disable-pip-version-check"
    ]

    try:
        # on windows, a UnicodeEncodeError occurs on check_output
        output = system.execute(cmd, stderr=subprocess.STDOUT)
        pattern = r"^{pkg}\s\((.*)\)\s+.*$".format(pkg=name)
        version = re.search(
            pattern,
            output,
            re.MULTILINE
        )
        if version is not None:
            version = version.group(1)
        else:
            LOGGER.critical(
                "CRITICAL"
                "Please contact Tools & Automation Team. "
                "Empty regex search <%s>.",
                pattern
            )

    except system.CalledProcessError:
        pass

    LOGGER.debug(version)
    return version

def check_installed_package_version(name):
    """
    Use python executable that intepreted lxk_testrunner package
    through sys.executable

    Commands,
    $ python -m pip show name
    """
    LOGGER.debug(name)
    assert isinstance(name, str), "must be {type_}".format(type_=str)

    version = None
    cmd = [
        sys.executable,
        "-m",
        "pip",
        "show",
        name,
        "--disable-pip-version-check"
    ]

    try:
        output = system.execute(cmd)
        pattern = r"^Version:\s(.+)$"
        version = re.search(
            pattern,
            output,
            re.MULTILINE
        )
        if version is not None:
            version = version.group(1).rstrip()
        else:
            LOGGER.critical(
                "CRITICAL"
                "Please contact Tools & Automation Team. "
                "Empty regex search <%s>.",
                pattern
            )

    except system.CalledProcessError:
        LOGGER.critical(
            "CRITICAL"
            "%s package is missing. "
            "Please update. Run, "
            "testrunner update",
            name
        )

    LOGGER.debug(version)
    return version

def upgrade(extra_index, name="", requirements=None, options=None):
    """
    Package upgrade.
    """
    LOGGER.debug(name)
    LOGGER.debug(extra_index)
    LOGGER.debug(requirements)
    LOGGER.debug(options)
    assert isinstance(extra_index, str), "must be {type_}".format(type_=str)
    assert isinstance(name, str), "must be {type_}".format(type_=str)
    if options is not None:
        assert isinstance(options, list), "must be {type_}".\
            format(type_=list)

    success = True
    cmd = [
        sys.executable,
        "-m",
        "pip",
        "install"
    ]

    if name:
        cmd += [name]

    if requirements is not None:
        assert os.path.isfile(requirements), "{file_} does not exist".\
            format(file_=requirements)
        cmd += ["-r", requirements]

    if options is not None:
        cmd += options

    cmd += [
        "--upgrade",
        "--extra-index-url={ix}".format(ix=extra_index),
        "--trusted-host={ix}".format(
            ix=re.sub(r"https?://", "", extra_index)
        ),
        "--disable-pip-version-check"
    ]

    try:
        output = system.execute(cmd)
        LOGGER.info(output)

    except system.CalledProcessError:
        success = False

    return success
